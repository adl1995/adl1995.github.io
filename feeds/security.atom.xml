<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/home/adeel - security</title><link href="https://adl1995.github.io/" rel="alternate"></link><link href="https://adl1995.github.io/feeds/security.atom.xml" rel="self"></link><id>https://adl1995.github.io/</id><updated>2024-01-08T08:42:00+01:00</updated><entry><title>The Two-Factor Authentication System at CERN</title><link href="https://adl1995.github.io/the-two-factor-authentication-system-at-cern.html" rel="alternate"></link><published>2024-01-08T08:42:00+01:00</published><updated>2024-01-08T08:42:00+01:00</updated><author><name>Adeel Ahmad</name></author><id>tag:adl1995.github.io,2024-01-08:/the-two-factor-authentication-system-at-cern.html</id><summary type="html">&lt;p&gt;This blog post is a summary of my project at the European Organization for Nuclear Research (&lt;span class="caps"&gt;CERN&lt;/span&gt;) where I worked in their Identity and Access Management (&lt;span class="caps"&gt;IAM&lt;/span&gt;)&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;My project was to introduce Two-Factor Authentication (&lt;span class="caps"&gt;2FA&lt;/span&gt;) in the Keycloak system. &lt;span class="caps"&gt;CERN&lt;/span&gt; started migration to the Keycloak Identity Provider (IdP) as part of the &lt;span class="caps"&gt;MALT&lt;/span&gt; project which aimed to move away from Microsoft products. The project was &lt;a href="https://home.cern/news/news/computing/three-year-malt-project-comes-close"&gt;cancelled&lt;/a&gt; in late 2021, however, some services were allowed to continue development. The &lt;span class="caps"&gt;IAM&lt;/span&gt; team was allowed to continue development for the &lt;span class="caps"&gt;CERN&lt;/span&gt; &lt;span class="caps"&gt;SSO&lt;/span&gt;, which was based on&amp;nbsp;Keycloak.&lt;/p&gt;
&lt;p&gt;We developed a custom &lt;span class="caps"&gt;2FA&lt;/span&gt; implementation with Keycloak which allowed users to optionally login from the &lt;span class="caps"&gt;SSO&lt;/span&gt; login page. Internally, this setup posed a few â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog post is a summary of my project at the European Organization for Nuclear Research (&lt;span class="caps"&gt;CERN&lt;/span&gt;) where I worked in their Identity and Access Management (&lt;span class="caps"&gt;IAM&lt;/span&gt;)&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;My project was to introduce Two-Factor Authentication (&lt;span class="caps"&gt;2FA&lt;/span&gt;) in the Keycloak system. &lt;span class="caps"&gt;CERN&lt;/span&gt; started migration to the Keycloak Identity Provider (IdP) as part of the &lt;span class="caps"&gt;MALT&lt;/span&gt; project which aimed to move away from Microsoft products. The project was &lt;a href="https://home.cern/news/news/computing/three-year-malt-project-comes-close"&gt;cancelled&lt;/a&gt; in late 2021, however, some services were allowed to continue development. The &lt;span class="caps"&gt;IAM&lt;/span&gt; team was allowed to continue development for the &lt;span class="caps"&gt;CERN&lt;/span&gt; &lt;span class="caps"&gt;SSO&lt;/span&gt;, which was based on&amp;nbsp;Keycloak.&lt;/p&gt;
&lt;p&gt;We developed a custom &lt;span class="caps"&gt;2FA&lt;/span&gt; implementation with Keycloak which allowed users to optionally login from the &lt;span class="caps"&gt;SSO&lt;/span&gt; login page. Internally, this setup posed a few drawbacks as it was provided using a separate realm in Keycloak. Firstly, it did not enforce users to use &lt;span class="caps"&gt;2FA&lt;/span&gt;, and only 10% of total &lt;span class="caps"&gt;CERN&lt;/span&gt; accounts were using &lt;span class="caps"&gt;2FA&lt;/span&gt; in this old approach. Secondly, this approach required creating a separate realm in Keycloak, thus duplicating all users, which added an overhead on the&amp;nbsp;software.&lt;/p&gt;
&lt;p&gt;This flow allowed users to login with &lt;span class="caps"&gt;2FA&lt;/span&gt; using a separate button in the &lt;span class="caps"&gt;SSO&lt;/span&gt; login portal, as shown&amp;nbsp;below.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/2fa/2fa-old-login-page.png" alt="2fa-old-login-page" style="width:400px;"/&gt;
&lt;/p&gt;

&lt;p&gt;In the new approach, &lt;span class="caps"&gt;2FA&lt;/span&gt; is tied to the user&amp;#8217;s account, thus making it mandatory for each login. The &lt;a href="https://home.cern/news/news/computing/computer-security-multifactor-masses"&gt;motivation&lt;/a&gt; behind this approach came from the &lt;span class="caps"&gt;CERN&lt;/span&gt; annual (simulated) phishing campaign, where each year the &lt;span class="caps"&gt;CERN&lt;/span&gt; Computer Security team sends thousands of emails containing phishing links, which redirects users to a web form asking for their password. Although no actual data is collected, this gives us an indication of how many users will get compromised in a real-world scenario. In the 2022 &lt;span class="caps"&gt;CERN&lt;/span&gt; phishing campaign, around 2000 users gave away their passwords. In a real phishing incident this would have meant 2000 compromised accounts, unless they were protected with Two-Factor Authentication (&lt;span class="caps"&gt;2FA&lt;/span&gt;).&lt;/p&gt;
&lt;h3&gt;Always-on &lt;span class="caps"&gt;2FA&lt;/span&gt;&amp;nbsp;Approach&lt;/h3&gt;
&lt;p&gt;In late 2020, the &lt;span class="caps"&gt;CERN&lt;/span&gt; Computer Security team took a mandate to make &lt;span class="caps"&gt;2FA&lt;/span&gt; mandatory and couple it with the user account. This new flow requires users to provide their &lt;span class="caps"&gt;2FA&lt;/span&gt; token for each login, if enabled for their account. In addition to improving security, since the account became protected for all &lt;span class="caps"&gt;SSO&lt;/span&gt; access, this solved two main&amp;nbsp;problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users were no longer required to re-login when they wanted to access a &lt;span class="caps"&gt;2FA&lt;/span&gt;-protected&amp;nbsp;application.&lt;/li&gt;
&lt;li&gt;The complex Keycloak setup and login flow could be&amp;nbsp;simplified.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new &lt;span class="caps"&gt;2FA&lt;/span&gt; flow is tied to the user&amp;#8217;s account rather than with the end application in a single realm. A realm in Keycloak is a space which includes users, applications, roles, and groups. This is made possible by providing &lt;span class="caps"&gt;2FA&lt;/span&gt; from the &lt;code&gt;cern&lt;/code&gt; realm in Keycloak, contrary to the &lt;span class="caps"&gt;2FA&lt;/span&gt; provided in &lt;code&gt;mfa&lt;/code&gt; realm, as done previously. A migration script &lt;code&gt;migrate-users-2fa&lt;/code&gt; is responsible for migrating users from the old to the new &lt;span class="caps"&gt;2FA&lt;/span&gt; flow. A comparison of the &lt;span class="caps"&gt;2FA&lt;/span&gt; systems is shown&amp;nbsp;below.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/2fa/2fa-new-flow.png" alt="new_flow" style="width:350px;"/&gt;
    &lt;img src="/images/2fa/2fa-old-flow.png" alt="old_flow" style="width:350px;"/&gt;
    &lt;p align="center"&gt;New vs. Old &lt;span class="caps"&gt;2FA&lt;/span&gt;&amp;nbsp;Flow&lt;/p&gt;
&lt;/p&gt;

&lt;h3&gt;Supported &lt;span class="caps"&gt;MFA&lt;/span&gt;&amp;nbsp;Methods&lt;/h3&gt;
&lt;p&gt;Keycloak natively supports Time-based one-time password (&lt;span class="caps"&gt;TOTP&lt;/span&gt;) and WebAuthn protocols. For WebAuthn we distribute Yubikeys throughout the &lt;span class="caps"&gt;CERN&lt;/span&gt; campus. The &lt;span class="caps"&gt;IAM&lt;/span&gt; team has developed a custom web portal where users can register their &lt;span class="caps"&gt;2FA&lt;/span&gt; token. In the future we also plan to add an option to register multiple &lt;span class="caps"&gt;2FA&lt;/span&gt;&amp;nbsp;tokens.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/2fa/users-portal.jpg" alt="users-portal" style="width:800px;"/&gt;
    &lt;p align="center"&gt;&lt;span class="caps"&gt;OTP&lt;/span&gt; and WebAuthn &lt;span class="caps"&gt;MFA&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;h3&gt;Keycloak&amp;nbsp;Configuration&lt;/h3&gt;
&lt;p&gt;We introduced several customisations in Keycloak, which were provided by implementing the Keycloak Service Provider Interfaces (SPIs). This included adding a custom role in the user token if they logged in with &lt;span class="caps"&gt;2FA&lt;/span&gt;. We also changed the default Keycloak authentication flow to check for a specific role in the user profile and to prompt for a &lt;span class="caps"&gt;2FA&lt;/span&gt; based on its presence. A check was also added for the user password reset flag in our database and to display a form to reset the user&amp;nbsp;password.&lt;/p&gt;
&lt;h4&gt;Custom Extensions&amp;nbsp;(SPIs)&lt;/h4&gt;
&lt;p&gt;Keycloak allows modifying the default authentication flow and add a custom check before the user logs in. In our custom &lt;span class="caps"&gt;2FA&lt;/span&gt; login flow, we check if a user has the &lt;span class="caps"&gt;2FA&lt;/span&gt; migrated role present in their token. We present the &lt;span class="caps"&gt;2FA&lt;/span&gt; login screen only if this role is present. Other SPIs we developed include adding a custom role in the user token and checking if the user password has been&amp;nbsp;compromised.&lt;/p&gt;
&lt;p&gt;In the old login flow, &lt;span class="caps"&gt;2FA&lt;/span&gt; login is provided using a separate button which redirects users to login using a different login screen. The new system incorporates &lt;span class="caps"&gt;2FA&lt;/span&gt; and &lt;span class="caps"&gt;1FA&lt;/span&gt; logins within the same login&amp;nbsp;flow.&lt;/p&gt;
&lt;p&gt;Note that in the figure below there is the addition of a &lt;code&gt;2FA Migrated Role&lt;/code&gt; which indicates whether a user is using the new &lt;span class="caps"&gt;2FA&lt;/span&gt; flow or not. This is a temporary solution which allows both optional and Always-on &lt;span class="caps"&gt;2FA&lt;/span&gt; systems to co-exist while we run the migration&amp;nbsp;campaign.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/2fa/2fa-login-flow-mfa.png" alt="2fa-login-flow-mfa" style="width:800px;"/&gt;
    &lt;p align="center"&gt;&lt;span class="caps"&gt;2FA&lt;/span&gt; Authentication&amp;nbsp;Flow&lt;/p&gt;
&lt;/p&gt;

&lt;!-- #### Role Check

The role check in Keycloak is done within the login flow. This role is added to the user profile in both the `cern` and `mfa` realm. We make use of the 2FA CLI tool to add this role to the user. --&gt;

&lt;h4&gt;Migration&amp;nbsp;Strategy&lt;/h4&gt;
&lt;p&gt;The &lt;span class="caps"&gt;CERN&lt;/span&gt; Computer Security team started rolling out the new &lt;span class="caps"&gt;2FA&lt;/span&gt; flow in February, 2021. Initially, users from the &lt;span class="caps"&gt;IT&lt;/span&gt; department were migrated to the new flow and were asked for their feedback. Gradually, we asked for volunteers from other departments and currently have around 3,000 users in the new &lt;span class="caps"&gt;2FA&lt;/span&gt; flow, while the total user count is above 10,000. The majority of unmigrated users are externally affiliated university employees at &lt;span class="caps"&gt;CERN&lt;/span&gt; and can be migrated at&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;The Computer Security team also maintains a list of critical accounts which are obliged to use &lt;span class="caps"&gt;2FA&lt;/span&gt;, and do not have the ability to opt-out (i.e. disable both their &lt;span class="caps"&gt;2FA&lt;/span&gt; tokens). The migration is controlled using an internal group which is open for subscription from any &lt;span class="caps"&gt;CERN&lt;/span&gt; account. A migration script is responsible for reading users from this group and &lt;strong&gt;1)&lt;/strong&gt; adding the required roles in their Keycloak profile and &lt;strong&gt;2)&lt;/strong&gt; copying their &lt;span class="caps"&gt;2FA&lt;/span&gt; tokens from the old to the new realm. The chart below shows a detailed overview of migrated users in&amp;nbsp;Keycloak.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/2fa/2fa-migrated-timeline.png" alt="2fa-migrated-timeline" style="width:800px;"/&gt;
    &lt;p align="center"&gt;&lt;span class="caps"&gt;2FA&lt;/span&gt; Migration&amp;nbsp;Timeline&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;The diagram below shows which departments are fully migrated, partially migrated, and pending&amp;nbsp;migration.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/2fa/2fa-migrated-diagram.png" alt="2fa-migrated-diagram" style="width:800px;"/&gt;
    &lt;p align="center"&gt;&lt;span class="caps"&gt;2FA&lt;/span&gt; Migration&amp;nbsp;Progress&lt;/p&gt;
&lt;/p&gt;

&lt;h4&gt;Command-Line&amp;nbsp;Tool&lt;/h4&gt;
&lt;p&gt;The authentication team has developed a &lt;span class="caps"&gt;CLI&lt;/span&gt; tool in Python to migrate users and generate statistics on the migration. This tool runs as a cron job to periodically synchronize users in the &lt;span class="caps"&gt;2FA&lt;/span&gt; group and adds the migrated role to their Keycloak profile. We currently have the following cron jobs in&amp;nbsp;place:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;migrate-users-2fa&lt;/code&gt;: Moves users to the new &lt;span class="caps"&gt;2FA&lt;/span&gt; flow and copies their &lt;span class="caps"&gt;2FA&lt;/span&gt;&amp;nbsp;credentials.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove-users-from-mfa-role&lt;/code&gt;: Removes users from the new &lt;span class="caps"&gt;2FA&lt;/span&gt; flow which are in the bypass&amp;nbsp;list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get-users-2fa&lt;/code&gt;: Returns a list of users pending migration to the new &lt;span class="caps"&gt;2FA&lt;/span&gt;&amp;nbsp;flow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tool is also installed on a &lt;span class="caps"&gt;VM&lt;/span&gt; which is accessible by the &lt;span class="caps"&gt;CERN&lt;/span&gt; Computer Security team to generate their own&amp;nbsp;statistics.&lt;/p&gt;
&lt;h4&gt;Critical&amp;nbsp;Users&lt;/h4&gt;
&lt;p&gt;The Computer Security team has defined a list of critical users which are obliged to use &lt;span class="caps"&gt;2FA&lt;/span&gt; for each login. These users do not have the ability to disable both their &lt;span class="caps"&gt;2FA&lt;/span&gt; methods. This is made possible by adding these users to a special authorization group. In the &lt;span class="caps"&gt;API&lt;/span&gt;, we check if the user is part of this authorization group and deny their request to disable both their &lt;span class="caps"&gt;2FA&lt;/span&gt;&amp;nbsp;methods.&lt;/p&gt;
&lt;h4&gt;Kerberos&amp;nbsp;Configuration&lt;/h4&gt;
&lt;p&gt;To simplify &lt;span class="caps"&gt;SSO&lt;/span&gt; access we also offer logins with Kerberos. All &lt;span class="caps"&gt;CERN&lt;/span&gt;-managed Windows machines get a valid Kerberos ticket on login and can login without re-entering their username and password. We provide Kerberos logins using a separate Identity Provider in both the &lt;code&gt;cern&lt;/code&gt; and &lt;code&gt;mfa&lt;/code&gt; realm. The reason to create a separate IdP was to avoid automatic logins if the user already had a valid Kerberos ticket. With this flow, users can choose to authenticate with Kerberos by pressing a separate button on the &lt;span class="caps"&gt;SSO&lt;/span&gt; login page, as shown&amp;nbsp;below.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/2fa/kerberos-login.png" alt="kerberos-login" style="width:400px;"/&gt;
    &lt;p align="center"&gt;&lt;span class="caps"&gt;2FA&lt;/span&gt;&amp;nbsp;Kerberos&lt;/p&gt;
&lt;/p&gt;

&lt;h3&gt;Compromised Password&amp;nbsp;Check&lt;/h3&gt;
&lt;p&gt;We added a check in the login page to search for the user&amp;#8217;s password hash in a large database of compromised passwords. This database was obtained from the &lt;a href="https://haveibeenpwned.com/"&gt;Have I Been Pwned&lt;/a&gt; website, and is hosted internally at &lt;span class="caps"&gt;CERN&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To achieve this check we developed a custom &lt;span class="caps"&gt;SPI&lt;/span&gt; in Keycloak which overrides the default authentication flow. This allowed us to intercept the user password and search it in our database. In case a match is found, we flag the user account and immediately notify them via email. The user has a grace period of 14 days to change their password, after which their account is blocked and a password reset is mandatory to access their&amp;nbsp;account. &lt;/p&gt;
&lt;h3&gt;Presentations&lt;/h3&gt;
&lt;p&gt;The &lt;span class="caps"&gt;2FA&lt;/span&gt; migration project at &lt;span class="caps"&gt;CERN&lt;/span&gt; was presented at these&amp;nbsp;conferences.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://indico.cern.ch/event/1200682/contributions/5090608/"&gt;HEPiX&amp;nbsp;presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://indico.jlab.org/event/459/contributions/11497/"&gt;&lt;span class="caps"&gt;CHEP&lt;/span&gt; 2023&amp;nbsp;presentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We plan to finish the &lt;span class="caps"&gt;2FA&lt;/span&gt; migration and remove all logic relating with optional &lt;span class="caps"&gt;2FA&lt;/span&gt; flow. There have been numerous requests from users to add new features to our system; these include the ability to register multiple &lt;span class="caps"&gt;2FA&lt;/span&gt; tokens and add support for step-up authentication for applications requiring &lt;span class="caps"&gt;2FA&lt;/span&gt;. These features are now natively supported in newer versions of Keycloak and thus will be made available to our users. The timeline for providing this new functionality has yet to be&amp;nbsp;determined.&lt;/p&gt;</content><category term="security"></category></entry><entry><title>Rate limiting in HAProxy andÂ Nginx</title><link href="https://adl1995.github.io/rate-limiting-in-haproxy-and-nginx.html" rel="alternate"></link><published>2023-05-29T18:00:00+02:00</published><updated>2023-05-29T18:00:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:adl1995.github.io,2023-05-29:/rate-limiting-in-haproxy-and-nginx.html</id><summary type="html">&lt;p&gt;Rate-limiting is a common strategy for safe guarding a server from potential DDoS attacks or sudden peaks in network traffic. Rate-limiting instructs the server to block requests from certain &lt;span class="caps"&gt;IP&lt;/span&gt; addresses that are sending an unusual number of requests to the&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;We can apply rate-limiting to both Nginx and HAProxy. Nginx runs on each end node hosting the service, while HAProxy serves as the load-balancer and distributes incoming requests among available nodes. This post describes how to rate-limit requests on both Nginx and HAProxy and shows how to whitelist IPs and rate-limit a single &lt;span class="caps"&gt;URL&lt;/span&gt;. The final section shows how to apply this configuration in&amp;nbsp;Puppet.&lt;/p&gt;
&lt;h2&gt;1. Rate-limiting in&amp;nbsp;HAProxy&lt;/h2&gt;
&lt;p&gt;This section describes how to configure HAProxy to rate-limit â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Rate-limiting is a common strategy for safe guarding a server from potential DDoS attacks or sudden peaks in network traffic. Rate-limiting instructs the server to block requests from certain &lt;span class="caps"&gt;IP&lt;/span&gt; addresses that are sending an unusual number of requests to the&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;We can apply rate-limiting to both Nginx and HAProxy. Nginx runs on each end node hosting the service, while HAProxy serves as the load-balancer and distributes incoming requests among available nodes. This post describes how to rate-limit requests on both Nginx and HAProxy and shows how to whitelist IPs and rate-limit a single &lt;span class="caps"&gt;URL&lt;/span&gt;. The final section shows how to apply this configuration in&amp;nbsp;Puppet.&lt;/p&gt;
&lt;h2&gt;1. Rate-limiting in&amp;nbsp;HAProxy&lt;/h2&gt;
&lt;p&gt;This section describes how to configure HAProxy to rate-limit incoming requests and block requests that cross a certain threshold. HAProxy provides rate-limiting in the following&amp;nbsp;contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rate queuing:&lt;/strong&gt; The simplest form of rate-limiting in which requests are queued if they cross a certain threshold. Subsequent requests are served in &lt;span class="caps"&gt;FIFO&lt;/span&gt;&amp;nbsp;order.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sliding window:&lt;/strong&gt; Requests are stored in a &lt;em&gt;stick table&lt;/em&gt; that keeps a record of incoming &lt;span class="caps"&gt;IP&lt;/span&gt; addresses. A threshold is defined, allowing the user to make a certain number of requests in a given time period. Subsequent requests are denied with a &lt;code&gt;429&lt;/code&gt; status&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fixed window:&lt;/strong&gt; Similar to the sliding window, we define an interval as before; however, instead of storing the request rate, we keep a request counter. When requests for a certain user reach their limit, subsequent requests get blocked, usually for a period of 24 hours (can be modified). This is mainly used for APIs where user requests are limited to, for example, 1000 per&amp;nbsp;day.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.1. HAProxy&amp;nbsp;configuration&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;This &lt;a href="https://www.haproxy.com/blog/four-examples-of-haproxy-rate-limiting"&gt;HAProxy blog&lt;/a&gt; covers the basics of applying rate-limiting on the server&amp;nbsp;side.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HAProxy configuration is divided into four sections: &lt;code&gt;frontend&lt;/code&gt;, &lt;code&gt;backend&lt;/code&gt;, &lt;code&gt;defaults&lt;/code&gt;, and &lt;code&gt;global&lt;/code&gt;. The &lt;code&gt;frontend&lt;/code&gt; handles incoming requests from clients, and the &lt;code&gt;backend&lt;/code&gt; is expected to fulfill the request. Note that all these steps can be performed in a combined config section, but for maintainability and readability, it is divided into separate&amp;nbsp;sections.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frontend&lt;/code&gt;: Handles all incoming requests from&amp;nbsp;clients.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backend&lt;/code&gt;: Expected to fulfill the&amp;nbsp;request.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaults&lt;/code&gt;: Contains default settings for the server. Can be used to avoid&amp;nbsp;duplication.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;global&lt;/code&gt;: Global settings for the&amp;nbsp;server.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;To rate-limit in HAProxy, we first need to decrypt the &lt;span class="caps"&gt;HTTPS&lt;/span&gt; traffic using &lt;span class="caps"&gt;SSL&lt;/span&gt; offloading. This feature is only available in HAProxy versions 1.x and&amp;nbsp;onwards.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will only focus on the &lt;code&gt;frontend&lt;/code&gt; and &lt;code&gt;backend&lt;/code&gt; configuration sections, as the other sections contain default configuration and will not be used for setting up load&amp;nbsp;balancing.&lt;/p&gt;
&lt;h3&gt;1.2. Defining the frontend&amp;nbsp;configuration&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;frontend&lt;/code&gt; section, we specify the port and &lt;span class="caps"&gt;IP&lt;/span&gt; address where our site listens for traffic. If we have configured &lt;span class="caps"&gt;SSL&lt;/span&gt; for our site, we also need to specify the location of the certificate&amp;nbsp;file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;View the &lt;code&gt;haproxy&lt;/code&gt; systemd service (&lt;code&gt;$ systemctl status haproxy&lt;/code&gt;) to check where the configuration file is&amp;nbsp;defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;frontend my_example_site.com&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# The keyword following &amp;#39;frontend&amp;#39; is the label.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bind *:443 ssl crt /etc/ssl/cert1.pem&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bind *:80&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Bind all IP addresses to listen on port 80.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;default_backend example_site_backend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Afterwards, traffic will get redirected to this backend.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;http-request track-sc0 src&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# (Described in section 1.4. Stick tables).&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;http-request deny deny_status 429 if { sc_http_req_rate(0) gt 50 } !white_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# (Described in section 1.5. Setting the Request Rate Limit).&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mode http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# HTTP mode instructs the server to inspect the traffic before passing it to the backend.&lt;/span&gt;
&lt;span class="c1"&gt;# Other options include &amp;#39;tcp,&amp;#39; which means the traffic is encrypted and will be passed on to the backend as is.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;redirect scheme https code 301 if !{ ssl_fc }&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Instructs the server to redirect traffic to HTTPS with a 301 status code if they try accessing from an unencrypted site.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stick-table type ipv6 size 100k expire 30s store http_req_rate(1s)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# See the section below for stick tables.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;1.3. Defining the backend&amp;nbsp;configuration&lt;/h3&gt;
&lt;p&gt;The backend section defines a pool of servers where requests are actually handled. Below is an example backend&amp;nbsp;configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;backend my_example_site.com_backend&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;balance roundrobin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Select the load balancing algorithm.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-server inter 2s fall 2 rise 2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# See below:&lt;/span&gt;
&lt;span class="c1"&gt;# inter: Specifies the inter-check delay for health checks. In this case, &amp;#39;inter 2s&amp;#39; indicates that the interval between two consecutive health checks for a server is 2 seconds.&lt;/span&gt;
&lt;span class="c1"&gt;# fall: Specifies the number of consecutive failed health checks after which a server is considered down. With &amp;#39;fall 2&amp;#39;, if two consecutive health checks fail, the server will be marked as down.&lt;/span&gt;
&lt;span class="c1"&gt;# rise: Specifies the number of consecutive successful health checks required for a server to be marked as up. With &amp;#39;rise 2&amp;#39;, after two consecutive successful health checks, the server will be marked as up.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mode http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Instruct backend servers to communicate using the HTTP protocol.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;option httpchk HEAD /status HTTP/1.1\r\nHost:\ www.example.com&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# See below:&lt;/span&gt;
&lt;span class="c1"&gt;# Sends a HEAD request to the /status path of the backend servers, specifying the Host header as www.example.com, to perform health checks and determine the availability and health status of the servers.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stick on src&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Enable session stickiness based on the source IP address of the client.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stick-table type ip size 20k peers sct_my_example_site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Define a stick table.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;server server1 192.168.1.25:80&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Define a list of servers; each on a separate line.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;1.4. Stick&amp;nbsp;tables&lt;/h3&gt;
&lt;p&gt;Stick tables are what make it possible to rate-limit servers. They are a key-value store that holds an incoming &lt;span class="caps"&gt;IP&lt;/span&gt; address as the key with its counter. The counter is incremented whenever a new request is made to the server. Using this information, we can define rules to block requests if they cross a certain&amp;nbsp;threshold.&lt;/p&gt;
&lt;p&gt;We can tweak how long a stick table can hold information before erasing its buffer. A stick table can be defined as&amp;nbsp;follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;backend st_src_global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# The backend for which we are defining this.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stick-table type ip size 1m expire 10s store http_req_rate(10s)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# A stick table that can hold 1m&lt;/span&gt;
&lt;span class="c1"&gt;# (1048576) IPs and expires after 10 seconds unless it is accessed during that time.&lt;/span&gt;
&lt;span class="c1"&gt;# The HTTP request rate is calculated in an interval of 10 seconds.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;HAProxy provides up to 12 stick table counter tracks, labeled from &lt;code&gt;sc0&lt;/code&gt; up to &lt;code&gt;sc11&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;1.5. Setting the request rate&amp;nbsp;limit&lt;/h3&gt;
&lt;p&gt;We can use the HAProxy built-in &lt;code&gt;http_req_rate&lt;/code&gt; directive to measure the request rate. In this example, we will return a &lt;code&gt;429&lt;/code&gt; if a user makes more than 50 requests in an interval of 5&amp;nbsp;seconds.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stick-table type ip size 1m expire 5s store http_req_rate(5s)&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;http-request deny deny_status 429 if { sc_http_req_rate(0) gt 50 } !white_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;The parameter &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;sc_http_req_rate&lt;/code&gt; refers to the stick counter&amp;nbsp;number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.6. Whitelisting an &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;address&lt;/h3&gt;
&lt;p&gt;To define a whitelist, we use Access Control Lists (ACLs). In HAProxy, they allow us to test various conditions and perform a given action based on those tests. They can be defined as&amp;nbsp;follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;acl white_list src 192.168.1.1 ...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# List of IP addresses to whitelist.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;http-request track-sc0 src&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;http-request deny deny_status 429 if { sc_http_req_rate(0) gt 25 } !white_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# This applies to all incoming IPs, except for those defined in the whitelist.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;1.7. Limiting the number of open&amp;nbsp;connections&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;conn_cur&lt;/code&gt; option can be used to count the number of open connections from an &lt;span class="caps"&gt;IP&lt;/span&gt; address. If a user has too many connections open, we can deny their further connections. The syntax remains similar as&amp;nbsp;before.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stick-table type ip size 1m expire 10s store conn_cur&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Define a stick table.&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tcp-request content track-sc0 src&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tcp-request content reject if { sc_conn_cur(0) gt 10 }&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# The parameter `0` in sc_conn_cur refers to the stick counter number.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;By using &lt;code&gt;tcp-request&lt;/code&gt; instead of &lt;code&gt;http-request&lt;/code&gt;, we do not evaluate &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers in the packet, making the processing more&amp;nbsp;efficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HAProxy provides additional counters for measuring the error rate of a site (&lt;span class="caps"&gt;HTTP&lt;/span&gt; requests that have a &lt;code&gt;4xx&lt;/code&gt; status code). The &lt;code&gt;bytes_out_rate&lt;/code&gt; counter can be used to track content that is generating the most traffic for your site. It is also possible to create custom statistics using the general-purpose counter &lt;code&gt;sc_inc_gpc0&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HAProxy Enterprise has features that allow individual increments across all peer nodes. This approach is better for detecting DDoS&amp;nbsp;attacks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2. Rate-limiting in&amp;nbsp;Nginx&lt;/h2&gt;
&lt;p&gt;Nginx supports various rate-limiting schemes. In the example below, we&amp;#8217;ll set up two-stage&amp;nbsp;rate-limiting.&lt;/p&gt;
&lt;p&gt;Two-stage rate-limiting throttles a request before blocking it. To implement this, we first define the &lt;code&gt;limit_req_zone&lt;/code&gt; in the Nginx configuration file &lt;code&gt;nginx.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;limit_req_zone zone=two_stage_limit_store:10m rate=5r/s;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To limit certain types of requests, we can use the &lt;code&gt;$limit&lt;/code&gt; variable. This can be used for rate-limiting a specific request method. For example, to rate-limit &lt;span class="caps"&gt;POST&lt;/span&gt; calls, we can&amp;nbsp;write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;map $request_method $limit {&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;default         &amp;#39;&amp;#39;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;POST            &amp;lt;IP of your server&amp;gt;;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;limit_req_zone $limit zone=two_stage_limit_store:10m rate=5r/s;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we reference the above limit in our server configuration. If the server hostname is &amp;#8220;example.com,&amp;#8221; this file will be located at &lt;code&gt;/etc/nginx/sites-enabled/example.com.conf&lt;/code&gt;. We first specify the response code for requests exceeding our rate-limit in the &lt;code&gt;server&lt;/code&gt; section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;server {&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;limit_req_status 429;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;The error code &lt;code&gt;429&lt;/code&gt; corresponds to &amp;#8220;Too Many&amp;nbsp;Requests.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, we define the &lt;code&gt;location&lt;/code&gt;(s) we would like to rate-limit (within the &lt;code&gt;server&lt;/code&gt; section). To rate-limit a specific endpoint, we can&amp;nbsp;add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;location /token/abc {&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;limit_req zone=two_stage_limit_store burst=25 delay=20;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If we replace &lt;code&gt;/token/abc&lt;/code&gt; with &lt;code&gt;/&lt;/code&gt;, we will rate-limit all endpoints on our&amp;nbsp;server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, we reference the limit zone defined earlier in the &lt;code&gt;nginx.conf&lt;/code&gt; file. The next two parameters are our rate-limit&amp;nbsp;parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;burst&lt;/code&gt; specifies the number of requests to allow within 1&amp;nbsp;second.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delay&lt;/code&gt; indicates the request count after which subsequent requests are&amp;nbsp;throttled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, in the above config, we allow up to 25 requests per second. Requests 1 to 20 will reach the server without any delay. Requests 21 to 25 will be throttled, and any subsequent requests will be rejected with a &lt;code&gt;429&lt;/code&gt; status&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Upon reviewing the text, I have identified a few minor typos and suggestions for&amp;nbsp;improvement:&lt;/p&gt;
&lt;h2&gt;3. Configuration in&amp;nbsp;Puppet&lt;/h2&gt;
&lt;p&gt;The configurations below are an exact replica of what is shown above, but in Puppet. It is assumed that the required services are already installed on the&amp;nbsp;system.&lt;/p&gt;
&lt;h3&gt;3.1. HAProxy&amp;nbsp;configuration&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# HAProxy Configuration&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ipv4s_list = ...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# List of IPs.&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;haproxy::frontend { &amp;quot;my_example_site.com&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bind    =&amp;gt; {&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;*:80&amp;#39;   =&amp;gt; [],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;:::80&amp;#39;  =&amp;gt; [],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;# SSL termination for rate-limiting.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;*:443&amp;#39;  =&amp;gt; &amp;quot;ssl crt ${certificate_path}&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;:::443&amp;#39; =&amp;gt; &amp;quot;ssl crt ${certificate_path}&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;options =&amp;gt; {&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;mode&amp;#39;            =&amp;gt; &amp;#39;http&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;redirect&amp;#39;        =&amp;gt; &amp;#39;scheme https code 301 if !{ ssl_fc }&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;stick-table&amp;#39;     =&amp;gt; &amp;#39;type ipv6 size 100k expire 30s store http_req_rate(1s)&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;acl&amp;#39;             =&amp;gt; &amp;quot;white_list src ${join($ipv4s_list, &amp;#39; &amp;#39;)}&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;http-request&amp;#39;    =&amp;gt; [&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;track-sc0 src&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;# This setting allows 45 requests per second.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;deny deny_status 429 if { sc_http_req_rate(0) gt 45 } !white_list&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;default_backend&amp;#39; =&amp;gt; &amp;quot;my_example_site.com_backend&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;},&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;haproxy::backend { &amp;quot;my_example_site.com_backend&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;options          =&amp;gt; {&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;balance&amp;#39;        =&amp;gt; &amp;#39;roundrobin&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;mode&amp;#39;           =&amp;gt; &amp;#39;http&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;default-server&amp;#39; =&amp;gt; &amp;#39;inter 2s fall 2 rise 2&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;option&amp;#39;         =&amp;gt; [&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;quot;httpchk HEAD /status HTTP/1.1\r\nHost:\ www.example.com&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;stick&amp;#39;          =&amp;gt; &amp;#39;on src&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;stick-table&amp;#39;    =&amp;gt; &amp;quot;type ip size 20k peers sct_my_example_site&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;},&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.2. Nginx&amp;nbsp;configuration&lt;/h3&gt;
&lt;p&gt;Similarly, for Nginx, we define the same configuration as&amp;nbsp;above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Two-stage rate limiting for all nodes, see: https://www.nginx.com/blog/rate-limiting-nginx/#Two-Stage-Rate-Limiting&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx::resource::location { &amp;#39;rate limit&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ensure                =&amp;gt; present,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssl                   =&amp;gt; true,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssl_only              =&amp;gt; true,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;location              =&amp;gt; &amp;#39;/&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;server                =&amp;gt; $facts[&amp;#39;networking&amp;#39;][&amp;#39;fqdn&amp;#39;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;limit_zone            =&amp;gt; &amp;#39;two_stage_limit_store burst=25 delay=20&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy                 =&amp;gt; &amp;quot;http://my_example_site.com:8080&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_read_timeout    =&amp;gt; &amp;#39;90s&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_connect_timeout =&amp;gt; &amp;#39;90s&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_send_timeout    =&amp;gt; &amp;#39;90s&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_set_header      =&amp;gt; $proxy_set_header,&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;class { &amp;#39;nginx&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Override the default Nginx log format.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;log_format              =&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;json_combined&amp;#39; =&amp;gt; &amp;#39;escape=json&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;#39;{&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;time_local&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${time_local}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;remote_addr&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${remote_addr}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;remote_user&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${remote_user}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${request}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${status}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;body_bytes_sent&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${body_bytes_sent}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;request_time&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${request_time}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;http_referrer&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${http_referer}&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;http_user_agent&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${http_user_agent}&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;limit_req_zone&lt;/span&gt;&lt;span class="nv"&gt;          &lt;/span&gt;&lt;span class="s"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${facts[&amp;#39;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;networking&amp;#39;][&amp;#39;ip&amp;#39;]} zone=two_stage_limit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Further&amp;nbsp;reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.haproxy.com/blog/haproxy-ssl-termination/"&gt;https://www.haproxy.com/blog/haproxy-ssl-termination/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.haproxy.com/blog/introduction-to-haproxy-stick-tables/"&gt;https://www.haproxy.com/blog/introduction-to-haproxy-stick-tables/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.haproxy.com/blog/four-examples-of-haproxy-rate-limiting/"&gt;https://www.haproxy.com/blog/four-examples-of-haproxy-rate-limiting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.haproxy.com/blog/introduction-to-haproxy-acls/"&gt;https://www.haproxy.com/blog/introduction-to-haproxy-acls/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://uldissturms.github.io/2014/03/03/request-rate-limiting-with-haproxy-vs-nginx-using-chef-solo/"&gt;http://uldissturms.github.io/2014/03/03/request-rate-limiting-with-haproxy-vs-nginx-using-chef-solo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sysbee.net/blog/sysbee-blog/haproxy-sysadmins-swiss-army-knife/"&gt;https://www.sysbee.net/blog/sysbee-blog/haproxy-sysadmins-swiss-army-knife/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Security"></category></entry><entry><title>The Kerberos Authentication System for Single Sign-On (SSO)</title><link href="https://adl1995.github.io/the-kerberos-authentication-system-for-single-sign-on-sso.html" rel="alternate"></link><published>2019-07-21T21:43:00+02:00</published><updated>2019-07-21T21:43:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:adl1995.github.io,2019-07-21:/the-kerberos-authentication-system-for-single-sign-on-sso.html</id><summary type="html">&lt;p&gt;When working with authentication protocols the commonly used technique in the past was known as &lt;em&gt;authentication by assertion&lt;/em&gt;. In this scheme a user logs in to their machine which then authenticates their request to a remote server. Once the authentication is finished the user can then communicate with other services. This provides a very low level of security, which has led to numerous vulnerabilities in the early versions of the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_r-commands#Security"&gt;rlogin&lt;/a&gt; Unix login&amp;nbsp;utility.&lt;/p&gt;
&lt;p&gt;An alternative solution is for the user to repeatedly provide their password each time they wish to use a service. This however requires the user to send their plain text password over the network, which could potentially be intercepted by a third-party user and can get â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;When working with authentication protocols the commonly used technique in the past was known as &lt;em&gt;authentication by assertion&lt;/em&gt;. In this scheme a user logs in to their machine which then authenticates their request to a remote server. Once the authentication is finished the user can then communicate with other services. This provides a very low level of security, which has led to numerous vulnerabilities in the early versions of the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_r-commands#Security"&gt;rlogin&lt;/a&gt; Unix login&amp;nbsp;utility.&lt;/p&gt;
&lt;p&gt;An alternative solution is for the user to repeatedly provide their password each time they wish to use a service. This however requires the user to send their plain text password over the network, which could potentially be intercepted by a third-party user and can get&amp;nbsp;compromised.&lt;/p&gt;
&lt;p&gt;Kerberos aims to solve this issue by introducing a mechanism where a user only logs-in to their local machine once, also known as Single-Sign On or &lt;span class="caps"&gt;SSO&lt;/span&gt;. The user&amp;#8217;s information is transferred securely over the network (and is deprived of plaintext passwords). This removes the risk of user&amp;#8217;s password being sniffed by an eavesdropper as the protocol only uses secret keys for communicating with the outside&amp;nbsp;service.&lt;/p&gt;
&lt;h3&gt;The Kerberos Authentication&amp;nbsp;System&lt;/h3&gt;
&lt;p&gt;The Kerberos Authentication System was first introduced in 1988 (&lt;a href="https://www3.nd.edu/~dthain/courses/cse66771/summer2014/papers/kerberos.pdf"&gt;paper&lt;/a&gt;). Its motivation was to authenticate a client to a server without sharing the user&amp;#8217;s password across a network. Normal authentication protocols are prone to outside attackers who can sniff the network traffic and potentially gain access to user&amp;nbsp;credentials.&lt;/p&gt;
&lt;p&gt;This led Kerberos to gain popularity during the past few decades and it is now being used in various organisations as their main authentication system, including &lt;a href="http://information-technology.web.cern.ch/services/fe/afs/howto/authenticate-processes"&gt;&lt;span class="caps"&gt;CERN&lt;/span&gt;&lt;/a&gt;. Kerberos is also the default authentication system used by the Windows Operating&amp;nbsp;System.&lt;/p&gt;
&lt;p&gt;Before explaining how this protocol works, let&amp;#8217;s review the terminology used in Kerberos. In Kerberos the client and user are referred to as a &amp;#8220;process&amp;#8221; and a &amp;#8220;principal&amp;#8221;, respectively. Apart from this it also has a naming convention for the entity used for authentication, which consists of its primary name, the instance, and a realm, and is expressed as &lt;code&gt;name.instance@realm&lt;/code&gt;. The primary name is the name of the user, and the instance allows the system to distinguish variations among the primary name. A realm refers to the administrative entity, for example, &lt;code&gt;CERN.CH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Kerberos exchanges a series of encrypted messages with the verifier (server) to prove that the process is running on behalf of the intended user. These messages include an encryption key, which is unique to each user, and is derived from their password. When an application communicates with the server it encrypts the data using this key and the server verifies its confidentiality through its&amp;nbsp;checksum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Although Kerberos ensures that the user&amp;#8217;s password is not shared with the service, there is still a risk of the user&amp;#8217;s machine being compromised, for example, through a Trojan horse&amp;nbsp;malware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Obtaining the encryption&amp;nbsp;key&lt;/h3&gt;
&lt;p&gt;Before a client sends an authentication request to the server, the authentication key is only known by the server, which it regenerates each time the client tries to authenticate itself. Kerberos then issues a certificate which is encrypted with the newly generated key and distributes it to the client. This certificate includes, among other information, a session key along with its &lt;span class="caps"&gt;TTL&lt;/span&gt; timestamp (after which the key will&amp;nbsp;expire).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The encryption algorithm used by Kerberos is called &lt;span class="caps"&gt;DES&lt;/span&gt; or &lt;a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard"&gt;Data Encryption Scheme&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The Kerberos Database Management Service (&lt;span class="caps"&gt;KDMS&lt;/span&gt;)&lt;/h3&gt;
&lt;p&gt;The &lt;span class="caps"&gt;KDMS&lt;/span&gt; is responsible for performing write operations to the Kerberos database. The current version of Kerberos states that the management service should only run on the server node, as shown in the figure&amp;nbsp;below.&lt;/p&gt;
&lt;figure style="text-align:center;" class="image"&gt;
  &lt;img src="https://adl1995.github.io/images/kerberos/kdms.png" alt="kdms"&gt;
  &lt;figcaption&gt;&lt;span class="caps"&gt;KDMS&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span class="caps"&gt;KDMS&lt;/span&gt;&amp;nbsp;utilities&lt;/h4&gt;
&lt;p&gt;The client side of Kerberos provides two utilities for communicating with the server. The first utility, &lt;code&gt;kpasswd&lt;/code&gt;, allows the principal to update their password. The second utility, &lt;code&gt;kadmin&lt;/code&gt;, allows the administrator to access the Kerberos database. It provides numerous commands for modifying, updating, and deleting a principal. As an example, the password for the principal user can be updated&amp;nbsp;by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kpasswd adeel
Password for adeel@CERN.CH: &amp;lt;current password&amp;gt;
Enter new password: &amp;lt;new password&amp;gt;
Enter it again: &amp;lt;new password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: It is not necessary to specify the username in the above command if that user is only registered with a single&amp;nbsp;realm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An important point to note here is that &lt;span class="caps"&gt;KDMS&lt;/span&gt; does not rely on the standard ticket-granting service, but rather requires the principal (user) to use the authentication service each time they interact with the database. Because of this feature, a logged-in user is not at risk of getting their password modified by a malicious user if their workstation is left&amp;nbsp;unattended.&lt;/p&gt;
&lt;figure style="text-align:center;" class="image"&gt;
  &lt;img src="https://adl1995.github.io/images/kerberos/kpasswd-kadmin-auth.png" alt="kpasswd-kadmin-auth"&gt;
  &lt;figcaption&gt;Authentication process for kpasswd and kadmin&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;Kerberos database&amp;nbsp;replication&lt;/h4&gt;
&lt;p&gt;To achieve better performance and high availability, Kerberos clients posses an exact replica of the Kerberos server database. The database needs to be in sync with the server and must contain the latest changes. For this, Kerberos provides two tools called &lt;code&gt;kprop&lt;/code&gt; and &lt;code&gt;kpropd&lt;/code&gt;. The &lt;code&gt;kprop&lt;/code&gt; tool runs on the server side and periodically creates a dump of the database (every 1 hour by default)  and sends it to the&amp;nbsp;client.&lt;/p&gt;
&lt;figure style="text-align:center;" class="image"&gt;
  &lt;img src="https://adl1995.github.io/images/kerberos/database-replication.png" alt="database-replication"&gt;
  &lt;figcaption&gt;Database replication in Kerberos&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Some additional steps are not mentioned here for brevity. These include the database checksum, which is used for verifying the data&amp;nbsp;authenticity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Kerberos in&amp;nbsp;practice&lt;/h3&gt;
&lt;p&gt;In some implementations of Kerberos the ticket is obtained as part of the system login process. Thus the user is often oblivious that Kerberos is running in the&amp;nbsp;background.&lt;/p&gt;
&lt;p&gt;In other cases the user can manually login using the &lt;code&gt;kinit&lt;/code&gt; tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kinit adeel
Password for adeel@CERN.CH: &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Limitations of&amp;nbsp;Kerberos&lt;/h3&gt;
&lt;p&gt;Although Kerberos takes away much of the hassle involved in the authentication process, it nevertheless has some limitations entailed with it. Firstly, if the user has chosen a weak password, it is relatively easy for an attacker to impersonate themselves as the real user. Secondly, the ticket expiration time is always a trade-off between security and convenience. A longer expiration time raises the risk of the session key being stolen and thus allowing an attacker to gain authority over the services, and a short expiration time requires the user to regularly re-enter their plaintext password into the shell, which could be infected by a&amp;nbsp;malware.&lt;/p&gt;
&lt;p&gt;Kerberos also does not support multifactor authentication by default, which is nowadays becoming the norm for most modern-day&amp;nbsp;applications.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: The images in this blog post are taken from the &lt;a href="https://www3.nd.edu/~dthain/courses/cse66771/summer2014/papers/kerberos.pdf"&gt;Kerberos &lt;span class="caps"&gt;MIT&lt;/span&gt; paper&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Security"></category></entry></feed>