<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/home/adeel - Security</title><link href="/" rel="alternate"></link><link href="/feeds/security.atom.xml" rel="self"></link><id>/</id><updated>2019-07-21T21:43:00+02:00</updated><entry><title>The Kerberos Authentication System for Single Sign-On (SSO)</title><link href="/the-kerberos-authentication-system-for-single-sign-on-sso.html" rel="alternate"></link><published>2019-07-21T21:43:00+02:00</published><updated>2019-07-21T21:43:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:None,2019-07-21:/the-kerberos-authentication-system-for-single-sign-on-sso.html</id><summary type="html">&lt;p&gt;When working with authentication protocols the commonly used technique in the past was known as &lt;em&gt;authentication by assertion&lt;/em&gt;. In this scheme a user logs in to their machine which then authenticates their request to a remote server. Once the authentication is finished the user can then communicate with other services. This provides a very low level of security, which has led to numerous vulnerabilities in the early versions of the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_r-commands#Security"&gt;rlogin&lt;/a&gt; Unix login utility.&lt;/p&gt;
&lt;p&gt;An alternative solution is for the user to repeatedly provide their password each time they wish to use a service. This however requires the user to send their plain text password over the network, which could potentially be intercepted by a third-party user and can get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When working with authentication protocols the commonly used technique in the past was known as &lt;em&gt;authentication by assertion&lt;/em&gt;. In this scheme a user logs in to their machine which then authenticates their request to a remote server. Once the authentication is finished the user can then communicate with other services. This provides a very low level of security, which has led to numerous vulnerabilities in the early versions of the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_r-commands#Security"&gt;rlogin&lt;/a&gt; Unix login utility.&lt;/p&gt;
&lt;p&gt;An alternative solution is for the user to repeatedly provide their password each time they wish to use a service. This however requires the user to send their plain text password over the network, which could potentially be intercepted by a third-party user and can get compromised.&lt;/p&gt;
&lt;p&gt;Kerberos aims to solve this issue by introducing a mechanism where a user only logs-in to their local machine once, also known as Single-Sign On or &lt;span class="caps"&gt;SSO&lt;/span&gt;. The user’s information is transferred securely over the network (and is deprived of plaintext passwords). This removes the risk of user’s password being sniffed by an eavesdropper as the protocol only uses secret keys for communicating with the outside service.&lt;/p&gt;
&lt;h3&gt;The Kerberos Authentication System&lt;/h3&gt;
&lt;p&gt;The Kerberos Authentication System was first introduced in 1988 (&lt;a href="https://www3.nd.edu/~dthain/courses/cse66771/summer2014/papers/kerberos.pdf"&gt;paper&lt;/a&gt;). Its motivation was to authenticate a client to a server without sharing the user’s password across a network. Normal authentication protocols are prone to outside attackers who can sniff the network traffic and potentially gain access to user credentials.&lt;/p&gt;
&lt;p&gt;This led Kerberos to gain popularity during the past few decades and it is now being used in various organisations as their main authentication system, including &lt;a href="http://information-technology.web.cern.ch/services/fe/afs/howto/authenticate-processes"&gt;&lt;span class="caps"&gt;CERN&lt;/span&gt;&lt;/a&gt;. Kerberos is also the default authentication system used by the Windows Operating System.&lt;/p&gt;
&lt;p&gt;Before explaining how this protocol works, let’s review the terminology used in Kerberos. In Kerberos the client and user are referred to as a “process” and a “principal”, respectively. Apart from this it also has a naming convention for the entity used for authentication, which consists of its primary name, the instance, and a realm, and is expressed as &lt;code&gt;name.instance@realm&lt;/code&gt;. The primary name is the name of the user, and the instance allows the system to distinguish variations among the primary name. A realm refers to the administrative entity, for example, &lt;code&gt;CERN.CH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Kerberos exchanges a series of encrypted messages with the verifier (server) to prove that the process is running on behalf of the intended user. These messages include an encryption key, which is unique to each user, and is derived from their password. When an application communicates with the server it encrypts the data using this key and the server verifies its confidentiality through its checksum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Although Kerberos ensures that the user’s password is not shared with the service, there is still a risk of the user’s machine being compromised, for example, through a Trojan horse malware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Obtaining the encryption key&lt;/h3&gt;
&lt;p&gt;Before a client sends an authentication request to the server, the authentication key is only known by the server, which it regenerates each time the client tries to authenticate itself. Kerberos then issues a certificate which is encrypted with the newly generated key and distributes it to the client. This certificate includes, among other information, a session key along with its &lt;span class="caps"&gt;TTL&lt;/span&gt; timestamp (after which the key will expire).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The encryption algorithm used by Kerberos is called &lt;span class="caps"&gt;DES&lt;/span&gt; or &lt;a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard"&gt;Data Encryption Scheme&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The Kerberos Database Management Service (&lt;span class="caps"&gt;KDMS&lt;/span&gt;)&lt;/h3&gt;
&lt;p&gt;The &lt;span class="caps"&gt;KDMS&lt;/span&gt; is responsible for performing write operations to the Kerberos database. The current version of Kerberos states that the management service should only run on the server node, as shown in the figure below.&lt;/p&gt;
&lt;figure class="image" style="text-align:center;"&gt;
&lt;img alt="kdms" src="/images/kerberos/kdms.png" style="width: 646px; height: auto; max-width: 100%;"/&gt;
&lt;figcaption&gt;&lt;span class="caps"&gt;KDMS&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span class="caps"&gt;KDMS&lt;/span&gt; utilities&lt;/h4&gt;
&lt;p&gt;The client side of Kerberos provides two utilities for communicating with the server. The first utility, &lt;code&gt;kpasswd&lt;/code&gt;, allows the principal to update their password. The second utility, &lt;code&gt;kadmin&lt;/code&gt;, allows the administrator to access the Kerberos database. It provides numerous commands for modifying, updating, and deleting a principal. As an example, the password for the principal user can be updated by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kpasswd adeel
Password for adeel@CERN.CH: &amp;lt;current password&amp;gt;
Enter new password: &amp;lt;new password&amp;gt;
Enter it again: &amp;lt;new password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It is not necessary to specify the username in the above command if that user is only registered with a single realm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An important point to note here is that &lt;span class="caps"&gt;KDMS&lt;/span&gt; does not rely on the standard ticket-granting service, but rather requires the principal (user) to use the authentication service each time they interact with the database. Because of this feature, a logged-in user is not at risk of getting their password modified by a malicious user if their workstation is left unattended.&lt;/p&gt;
&lt;figure class="image" style="text-align:center;"&gt;
&lt;img alt="kpasswd-kadmin-auth" src="/images/kerberos/kpasswd-kadmin-auth.png" style="width: 636px; height: auto; max-width: 100%;"/&gt;
&lt;figcaption&gt;Authentication process for kpasswd and kadmin&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;Kerberos database replication&lt;/h4&gt;
&lt;p&gt;To achieve better performance and high availability, Kerberos clients posses an exact replica of the Kerberos server database. The database needs to be in sync with the server and must contain the latest changes. For this, Kerberos provides two tools called &lt;code&gt;kprop&lt;/code&gt; and &lt;code&gt;kpropd&lt;/code&gt;. The &lt;code&gt;kprop&lt;/code&gt; tool runs on the server side and periodically creates a dump of the database (every 1 hour by default)  and sends it to the client.&lt;/p&gt;
&lt;figure class="image" style="text-align:center;"&gt;
&lt;img alt="database-replication" src="/images/kerberos/database-replication.png" style="width: 710px; height: auto; max-width: 100%;"/&gt;
&lt;figcaption&gt;Database replication in Kerberos&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Some additional steps are not mentioned here for brevity. These include the database checksum, which is used for verifying the data authenticity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Kerberos in practice&lt;/h3&gt;
&lt;p&gt;In some implementations of Kerberos the ticket is obtained as part of the system login process. Thus the user is often oblivious that Kerberos is running in the background.&lt;/p&gt;
&lt;p&gt;In other cases the user can manually login using the &lt;code&gt;kinit&lt;/code&gt; tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kinit adeel
Password for adeel@CERN.CH: &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Limitations of Kerberos&lt;/h3&gt;
&lt;p&gt;Although Kerberos takes away much of the hassle involved in the authentication process, it nevertheless has some limitations entailed with it. Firstly, if the user has chosen a weak password, it is relatively easy for an attacker to impersonate themselves as the real user. Secondly, the ticket expiration time is always a trade-off between security and convenience. A longer expiration time raises the risk of the session key being stolen and thus allowing an attacker to gain authority over the services, and a short expiration time requires the user to regularly re-enter their plaintext password into the shell, which could be infected by a malware.&lt;/p&gt;
&lt;p&gt;Kerberos also does not support multifactor authentication by default, which is nowadays becoming the norm for most modern-day applications.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: The images in this blog post are taken from the &lt;a href="https://www3.nd.edu/~dthain/courses/cse66771/summer2014/papers/kerberos.pdf"&gt;Kerberos &lt;span class="caps"&gt;MIT&lt;/span&gt; paper&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Security"></category></entry></feed>