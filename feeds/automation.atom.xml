<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/home/adeel - automation</title><link href="/" rel="alternate"></link><link href="/feeds/automation.atom.xml" rel="self"></link><id>/</id><updated>2020-05-11T11:02:00+02:00</updated><entry><title>Plotting graphical data using RRDtool and a Python Collectd plugin</title><link href="/plotting-graphical-data-using-rrdtool-and-a-python-collectd-plugin.html" rel="alternate"></link><published>2020-05-11T11:02:00+02:00</published><updated>2020-05-11T11:02:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:None,2020-05-11:/plotting-graphical-data-using-rrdtool-and-a-python-collectd-plugin.html</id><summary type="html">&lt;!-- Date: 2019-05-30 07:57 --&gt;
&lt;!-- Title: Using RRDtool and a Python Collectd plugin to graph weather data --&gt;
&lt;!-- Title: Plotting graphs data from a Python Collectd plugin using RRDtool --&gt;
&lt;p&gt;Collectd is a Unix daemon which periodically collects statistics that can be used for a myriad of purposes, such as identifying &lt;span class="caps"&gt;CPU&lt;/span&gt; or memory bottleneck issues. The collected data can also be transformed to graphs using &lt;a href="https://oss.oetiker.ch/rrdtool"&gt;RRDtool&lt;/a&gt; or a &lt;a href="https://en.wikipedia.org/wiki/Grafana"&gt;Grafana&lt;/a&gt; dashboard (Grafana provides real time graphs and complex search queries).&lt;/p&gt;
&lt;p&gt;The daemon itself is modular and functions through external plugins where each plugin performs a distinct function. This blog post will explore a plugin which periodically &lt;em&gt;collects weather information of a given city&lt;/em&gt;. The first section will explain how the plugin configuration works and how to plot a graph of the output data using RRDtool. Finally, we will delve into the plugin internals and see how it’s written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;!-- Date: 2019-05-30 07:57 --&gt;
&lt;!-- Title: Using RRDtool and a Python Collectd plugin to graph weather data --&gt;
&lt;!-- Title: Plotting graphs data from a Python Collectd plugin using RRDtool --&gt;
&lt;p&gt;Collectd is a Unix daemon which periodically collects statistics that can be used for a myriad of purposes, such as identifying &lt;span class="caps"&gt;CPU&lt;/span&gt; or memory bottleneck issues. The collected data can also be transformed to graphs using &lt;a href="https://oss.oetiker.ch/rrdtool"&gt;RRDtool&lt;/a&gt; or a &lt;a href="https://en.wikipedia.org/wiki/Grafana"&gt;Grafana&lt;/a&gt; dashboard (Grafana provides real time graphs and complex search queries).&lt;/p&gt;
&lt;p&gt;The daemon itself is modular and functions through external plugins where each plugin performs a distinct function. This blog post will explore a plugin which periodically &lt;em&gt;collects weather information of a given city&lt;/em&gt;. The first section will explain how the plugin configuration works and how to plot a graph of the output data using RRDtool. Finally, we will delve into the plugin internals and see how it’s written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: For an intro on how to setup Collectd, refer to this &lt;a href="https://collectd.org/wiki/index.php/First_steps"&gt;wiki&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Plugin configuration&lt;/h2&gt;
&lt;p&gt;All Collectd plugins that need to be enabled must be listed in the &lt;code&gt;collectd.conf&lt;/code&gt; file. The default file paths for Collectd can be viewed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ collectd -h

Builtin defaults:
  Config file       /etc/collectd.conf
  PID file          /var/run/collectd.pid
  Plugin directory  /usr/lib/collectd
  Data directory    /var/lib/collectd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The plugins themselves lie under the &lt;code&gt;/usr/lib/collectd&lt;/code&gt; directory, by default.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Python plugins might not work when present under the default plugin directory, as this causes anomalies when importing external modules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Invoking the plugin&lt;/h3&gt;
&lt;p&gt;Let’s say we have a script named &lt;code&gt;log-weather.py&lt;/code&gt; which we want to periodically call using Collectd. We first need to change its path to our custom plugins directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cp /path/to/log-weather.py /usr/lib/collectd/python/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we will add this plugin to our config file. But first we need to load the Python plugin (this exposes the &lt;code&gt;collectd&lt;/code&gt; module, which we then import in our script):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;LoadPlugin python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We then add this section to enable our Python plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;LoadPlugin&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="na"&gt;&amp;lt;Plugin python&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;ModulePath&lt;/span&gt; &lt;span class="s"&gt;"/usr/lib/collectd/python/"&lt;/span&gt;
    &lt;span class="n"&gt;Import&lt;/span&gt; &lt;span class="s"&gt;"log-weather"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Module&lt;/span&gt; &lt;span class="nn"&gt;weather_logger&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;CITY&lt;/span&gt;    &lt;span class="s"&gt;"&amp;lt;city&amp;gt;"&lt;/span&gt;
        &lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;api_key&amp;gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;&amp;lt;/Plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The import structure remains similar for all Python plugins, except for the module path, its name, and its configuration parameters. Let’s go over these in detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The script name is provided in the &lt;code&gt;Import&lt;/code&gt; directive. Notice how this differs from the module name in the following line. We’ll see this in detail in a later &lt;a href="#weather-logger-plugin"&gt;section&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This module requires two configuration parameters, &lt;code&gt;CITY&lt;/code&gt; and &lt;code&gt;API_KEY&lt;/code&gt;. It calls an external &lt;span class="caps"&gt;API&lt;/span&gt; with the key to collect the weather information for the given city.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Enabling RRDtool&lt;/h4&gt;
&lt;p&gt;Since we need to plot our data at the end, we will enable the RRDtool plugin. This plugin allows writing data, which is periodically dispatched by our script, to an &lt;span class="caps"&gt;RRD&lt;/span&gt; (Round Robin Database) file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;LoadPlugin rrdtool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Setting the call interval&lt;/h4&gt;
&lt;p&gt;In our &lt;code&gt;collect.conf&lt;/code&gt; file we can tweak the frequency by which our plugin is called with the &lt;code&gt;Interval&lt;/code&gt; parameter. This expects a value in seconds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Interval 1800&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our script will now collect the weather information every 1800 seconds, or every half an hour.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It is also possible to set the interval for each plugin separately. This requires setting the interval in the &lt;code&gt;register_read&lt;/code&gt; function, which we will see later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Starting the Collectd service&lt;/h3&gt;
&lt;p&gt;Once the configuration is done, we must (re)start the Collectd service using &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: this step might be different based on the Linux distribution. The &lt;a href="https://collectd.org/wiki/index.php/First_steps"&gt;Collectd Wiki&lt;/a&gt; contains further information regarding this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enabling the &lt;code&gt;systemd&lt;/code&gt; service will also automatically start Collectd when the user logs in to their computer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ systemctl start collectd
$ systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; collectd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Plotting the data&lt;/h3&gt;
&lt;p&gt;As soon as the Collectd service is running, data will be written to the &lt;span class="caps"&gt;RRD&lt;/span&gt; file using the RRDtool plugin which we enabled earlier. This data is stored inside the data directory, which in our case is &lt;code&gt;/var/lib/collectd/home/weather_alert/temperature.rrd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To plot this data we will use the &lt;code&gt;rrdtool&lt;/code&gt; Linux utility. (This tool is different from the one used by Collectd, which uses the &lt;code&gt;librrd&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt; for writing the data). We will first view the information present in the &lt;code&gt;temperature.rrd&lt;/code&gt; file with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rrdtool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rrd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;rrd_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"0003"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;last_update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1589090986&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;header_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3496&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"GAUGE"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then proceed with creating the graph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;rrdtool graph weather.png \             # (1)&lt;/span&gt;
&lt;span class="err"&gt;  --title "Weather (Athens)" \          # (2)&lt;/span&gt;
&lt;span class="err"&gt;  --vertical-label "Temperature (°C)" \ # (3)&lt;/span&gt;
&lt;span class="err"&gt;  --start now-8000s --end now \         # (4)&lt;/span&gt;
&lt;span class="err"&gt;  DEF:a=temperature.rrd:value:AVERAGE   # (5)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which produces this result:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="/images/weather-rrdtool.png" style="width:600px;"/&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: this tool can produce some &lt;a href="https://oss.oetiker.ch/rrdtool/gallery/index.en.html"&gt;very complex graphs&lt;/a&gt;, but for our use case we will just stick with a simple line graph.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s go over the above command in detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We specify the name for the output graph.&lt;/li&gt;
&lt;li&gt;The title appears at the top of a graph.&lt;/li&gt;
&lt;li&gt;The vertical label appears to the left of our x-axis.&lt;/li&gt;
&lt;li&gt;Each graph has a start and end time which can be provided either as a relative or absolute timestamp value. &lt;code&gt;now-7200s&lt;/code&gt; means that we will view the weather statistics from the past 2 hours up till now.&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;DEF&lt;/span&gt; directive defines the graph variable &lt;code&gt;a&lt;/code&gt;, which is followed by this pattern &lt;code&gt;&amp;lt;source file&amp;gt;:&amp;lt;key&amp;gt;:&amp;lt;metric&amp;gt;&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;source file&amp;gt;&lt;/code&gt; contains the path to the &lt;span class="caps"&gt;RRD&lt;/span&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; is what we saw in the &lt;code&gt;rrdtool info&lt;/code&gt; command as &lt;code&gt;ds[value]&lt;/code&gt;. In this case we will plot the &lt;code&gt;value&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;metric&amp;gt;&lt;/code&gt; is usually either &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, or &lt;code&gt;AVERAGE&lt;/code&gt;. It is also visible in the &lt;code&gt;info&lt;/code&gt; output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having configured the script we will now go over the plugin structure and see how it’s actually written.&lt;/p&gt;
&lt;h2&gt;&lt;a name="weather-logger-plugin"&gt;&lt;/a&gt; Weather Logger plugin&lt;/h2&gt;
&lt;p&gt;Each Collectd Python plugin begins with importing the &lt;code&gt;collectd&lt;/code&gt; module. It then defines a series of callback functions. For our use case we will only define a &lt;code&gt;config&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; callback function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collectd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;PLUGIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'weather_alert'&lt;/span&gt;
&lt;span class="n"&gt;CITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;config_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;CITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_KEY&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'city'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;CITY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'api_key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;CITY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; plugin: [Error] The city name must be provided'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PLUGIN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; plugin: [Error] The API key must be provided'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PLUGIN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The configuration function above sets the &lt;code&gt;CITY&lt;/code&gt; and &lt;code&gt;API_KEY&lt;/code&gt; variables that we passed over from the config file. Later on we’ll see how to view the Collectd logs.&lt;/p&gt;
&lt;p&gt;Let’s now define the read callback function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_callback&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;weather&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'http://api.openweathermap.org/data/2.5/forecast?q=&lt;/span&gt;&lt;span class="si"&gt;{CITY}&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;units=metric&amp;amp;appid=&lt;/span&gt;&lt;span class="si"&gt;{API_KEY}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;weather_metric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PLUGIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'temperature'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;weather_metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'list'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'main'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'temp'&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;weather_metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; plugin: [Error] Unable to run &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We call the OpenWeatherMap &lt;span class="caps"&gt;API&lt;/span&gt; for collecting the data. The &lt;code&gt;collectd.Values()&lt;/code&gt; function registers the plugin name which we later reference in the config file. The &lt;code&gt;weather_metric.dispatch()&lt;/code&gt; function is what writes the data to the &lt;span class="caps"&gt;RRD&lt;/span&gt; file.&lt;/p&gt;
&lt;p&gt;The final step is to register these two functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Diagnosing plugin issues&lt;/h2&gt;
&lt;p&gt;Let’s remove the &lt;code&gt;API_KEY&lt;/code&gt; from the configuration file and see if it raises any errors. We can check the Collectd status with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;●&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;System&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;statistics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;Loaded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loaded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;May&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;29390&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;weather_alert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;provided&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It can also be helpful to view the full logs for more details. By default, these are preset in the &lt;code&gt;/var/log/collectd.log&lt;/code&gt; file.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.dbrgn.ch/2017/3/10/write-a-collectd-python-plugin"&gt;https://blog.dbrgn.ch/2017/3/10/write-a-collectd-python-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontier.town/2017/10/collectd-and-rrdtool"&gt;https://frontier.town/2017/10/collectd-and-rrdtool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/twolfson/ad3bb967d37dd140382d"&gt;https://gist.github.com/twolfson/ad3bb967d37dd140382d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="automation"></category></entry><entry><title>Programmatically organising your backpacking trip using Google My Maps</title><link href="/programmatically-organising-your-backpacking-trip-using-google-my-maps.html" rel="alternate"></link><published>2019-05-30T09:14:00+02:00</published><updated>2019-05-30T09:14:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:None,2019-05-30:/programmatically-organising-your-backpacking-trip-using-google-my-maps.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;This blog post has been converted from a recent &lt;a href="https://docs.google.com/presentation/d/10NlBmnUk7qsh0nPso3Lqg8OvoP6CZg8sHJx1gllHem4/edit#slide=id.g577465d654_0_0"&gt;presentation&lt;/a&gt; I gave during the &lt;a href="https://indico.cern.ch/event/771113/overview"&gt;Thematic &lt;span class="caps"&gt;CERN&lt;/span&gt; School of Computing 2019&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When planning a journey to a new country or a city it helps to mark down all the places you would like to visit and eventually create a travel plan for each day. I personally use Google Maps for finding places of interest including historical buildings, museums, and libraries. As an example, if I were to visit Split, Croatia I can format the query on Google Maps as “places to visit split” which will list all the attractions based on features such as reviews and popularity.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Things to do in Split" src="/images/google-my-maps/things-to-do-split.png" style="width:300px;"/&gt;
&lt;/p&gt;
&lt;p&gt;Although it is possible to use the “Save” feature in Google Maps, it does …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This blog post has been converted from a recent &lt;a href="https://docs.google.com/presentation/d/10NlBmnUk7qsh0nPso3Lqg8OvoP6CZg8sHJx1gllHem4/edit#slide=id.g577465d654_0_0"&gt;presentation&lt;/a&gt; I gave during the &lt;a href="https://indico.cern.ch/event/771113/overview"&gt;Thematic &lt;span class="caps"&gt;CERN&lt;/span&gt; School of Computing 2019&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When planning a journey to a new country or a city it helps to mark down all the places you would like to visit and eventually create a travel plan for each day. I personally use Google Maps for finding places of interest including historical buildings, museums, and libraries. As an example, if I were to visit Split, Croatia I can format the query on Google Maps as “places to visit split” which will list all the attractions based on features such as reviews and popularity.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Things to do in Split" src="/images/google-my-maps/things-to-do-split.png" style="width:300px;"/&gt;
&lt;/p&gt;
&lt;p&gt;Although it is possible to use the “Save” feature in Google Maps, it does not allow customisability options including categorisation of places and marking places based on priority.&lt;/p&gt;
&lt;h3&gt;Google My Maps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.google.com/mymaps"&gt;Google My Maps&lt;/a&gt; is a tool which allows creating custom maps and is useful for making travel plans, marking hiking routes, and planning other sports activities. It also allows sharing the map with other people either publicly or privately. Some of its features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updating the base map to satellite or street view&lt;/li&gt;
&lt;li&gt;Personalising the map by styling the icons and changing their color&lt;/li&gt;
&lt;li&gt;Importing data from a spreadsheet including &lt;span class="caps"&gt;CSV&lt;/span&gt;, &lt;span class="caps"&gt;XML&lt;/span&gt;, and &lt;span class="caps"&gt;KML&lt;/span&gt; files&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Adding a new entry&lt;/h4&gt;
&lt;p&gt;The manual process for adding a new entry involves finding a location using the search bar and then adding it to the map layer which places a waypoint icon on the base map.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Adding entry" src="/images/google-my-maps/adding-entry.png" style="width:500px;"/&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A layer is Google My Map’s way of categorising different topics, for example, there can be a separate layer for each city.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This, however, is a tedious and repetitive task, which can be done programmatically using Python.&lt;/p&gt;
&lt;h4&gt;Adding entries using Google Maps &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;In principal, if we have a spreadsheet with a list of places, the only task left is to import these places into our custom map. Thus we require a way of automating the process of creating this spreadsheet.&lt;/p&gt;
&lt;p&gt;The Google Maps &lt;span class="caps"&gt;API&lt;/span&gt; provides an elegant way of querying data using their Places &lt;span class="caps"&gt;API&lt;/span&gt;. For example, to get a list of places to visit in Split, the request can be formatted as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;https://maps.googleapis.com/maps/api/place/textsearch/json?query=things+to+do+split&amp;amp;language=en&amp;amp;key=API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This returns a &lt;span class="caps"&gt;JSON&lt;/span&gt; object containing a list of places. Each record contains the place’s name and its latitude, longitude, address, icon, etc. &lt;/p&gt;
&lt;p&gt;The code block below sends a &lt;span class="caps"&gt;GET&lt;/span&gt; request to the server, and then performs four major steps including getting the &lt;code&gt;result&lt;/code&gt; object, enumerating through the places list and then writing the appropriate entries to a &lt;span class="caps"&gt;CSV&lt;/span&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Fetch the data.&lt;/span&gt;
&lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'https://maps.googleapis.com/maps/api/place/textsearch/json?query=&lt;/span&gt;&lt;span class="si"&gt;{args.query}&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;language=en&amp;amp;key=API_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Convert the response to a JSON object.&lt;/span&gt;
&lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;'results'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Note: in this case we only keep the following three columns, however, we can further populate the CSV file with the place description, its rating, etc.&lt;/span&gt;
&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'coordinates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'icon'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Write the data to a CSV file.&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'places/&lt;/span&gt;&lt;span class="si"&gt;{query}&lt;/span&gt;&lt;span class="s1"&gt;.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'icon'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'geometry'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'location'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'lat'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'geometry'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'location'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'lng'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{filename}&lt;/span&gt;&lt;span class="s1"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{data}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Invoking the script&lt;/h4&gt;
&lt;p&gt;To get a list of all places to visit in Split the script can be invoked as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python fetch-google-maps.py &lt;span class="s2"&gt;"things to do split"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a &lt;span class="caps"&gt;CSV&lt;/span&gt; file called &lt;code&gt;Things To Do Split.csv&lt;/code&gt; in the &lt;code&gt;places&lt;/code&gt; sub-directory.&lt;/p&gt;
&lt;h4&gt;Importing the file&lt;/h4&gt;
&lt;p&gt;Google My Maps supports importing data from  &lt;span class="caps"&gt;CSV&lt;/span&gt;, &lt;span class="caps"&gt;XML&lt;/span&gt;, &lt;span class="caps"&gt;KML&lt;/span&gt;, and &lt;span class="caps"&gt;GPL&lt;/span&gt; files and then populates the map using the input data. Instead of using coordinates we can also use street addresses.&lt;/p&gt;
&lt;p&gt;To import the file, create a new layer in your custom map and use the “Import” utility. A window will pop up prompting for the file upload. Note that you will still need to do mark the appropriate columns in your &lt;span class="caps"&gt;CSV&lt;/span&gt; file which correspond to the place’s name and its coordinates.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Coordinates" src="/images/google-my-maps/lat-lon-prompt.png" style="width:350px;"/&gt;
&lt;img alt="Title" src="/images/google-my-maps/title-prompt.png" style="width:350px;"/&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: By default, if there are more than 10 items in a &lt;span class="caps"&gt;CSV&lt;/span&gt; file the tool will group them all under a single entry. To view each item separately, select the “Uniform style” option and update “group places by” dropdown to “Individual styles”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Limitations&lt;/h3&gt;
&lt;p&gt;Although our map is now populated with the landmark icons at their correct positions, they are not styled and all have the same icon. They are also not color coded which makes it difficult to keep track of all the places to visit on a particular day and changing the icon allows quick identification, e.g. museum or library should have two distinct icons. We thus need a way to transform the map to:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Map simple" src="/images/google-my-maps/map-simple.png" style="width:350px;"/&gt;
&lt;img alt="Map styled" src="/images/google-my-maps/map-styled.png" style="width:400px;"/&gt;
&lt;/p&gt;
&lt;p&gt;I could not find a way to embed this information within the &lt;span class="caps"&gt;CSV&lt;/span&gt; file, and this step still has to be done manually.  Another limitation is that it is not possible to import multiple &lt;span class="caps"&gt;CSV&lt;/span&gt; files into a single layer, thus requiring to merge the files before importing them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A styled map from one of my recent trips can be seen &lt;a href="https://drive.google.com/open?id=1OdZq0vA46Oi8sny75zG0Z-MNVURjCSh6&amp;amp;usp=sharing"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;Source code: &lt;a href="https://gist.github.com/adl1995/a66fa3532364ff87aaaec72be332abe7"&gt;https://gist.github.com/adl1995/a66fa3532364ff87aaaec72be332abe7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blog: &lt;a href="https://www.google.com/earth/outreach/learn/visualize-your-data-on-a-custom-map-using-google-my-maps"&gt;https://www.google.com/earth/outreach/learn/visualize-your-data-on-a-custom-map-using-google-my-maps&lt;/a&gt;&lt;/p&gt;</content><category term="Automation"></category></entry><entry><title>Building RPM packages with rpmbuild, Koji, and GitLab-CI</title><link href="/building-rpm-packages-with-rpmbuild-koji-and-gitlab-ci.html" rel="alternate"></link><published>2019-05-06T08:24:00+02:00</published><updated>2019-05-06T08:24:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:None,2019-05-06:/building-rpm-packages-with-rpmbuild-koji-and-gitlab-ci.html</id><summary type="html">&lt;p&gt;The &lt;span class="caps"&gt;RPM&lt;/span&gt; system facilitates the user to query and update a software package. It also allows examining package interdependencies, and verifying package file permissions. This blog post will describe the process of building an &lt;span class="caps"&gt;RPM&lt;/span&gt; package using the &lt;code&gt;rpmbuild&lt;/code&gt; utility and will then explain how to schedule build tasks using Koji. Finally, it will describe how to automate the build pipeline using continuous integration in GitLab.&lt;/p&gt;
&lt;h3&gt;1. &lt;span class="caps"&gt;RPM&lt;/span&gt; Package Manager&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;RPM&lt;/span&gt; Package Manager is an open-source package management system which was originally designed for Red Hat Linux, but it is now supported on most Linux distributions. &lt;span class="caps"&gt;RPM&lt;/span&gt; packages can generally be of two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary &lt;span class="caps"&gt;RPM&lt;/span&gt;: A binary &lt;span class="caps"&gt;RPM&lt;/span&gt; contains the compiled binary of a complete application (or a library …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The &lt;span class="caps"&gt;RPM&lt;/span&gt; system facilitates the user to query and update a software package. It also allows examining package interdependencies, and verifying package file permissions. This blog post will describe the process of building an &lt;span class="caps"&gt;RPM&lt;/span&gt; package using the &lt;code&gt;rpmbuild&lt;/code&gt; utility and will then explain how to schedule build tasks using Koji. Finally, it will describe how to automate the build pipeline using continuous integration in GitLab.&lt;/p&gt;
&lt;h3&gt;1. &lt;span class="caps"&gt;RPM&lt;/span&gt; Package Manager&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;RPM&lt;/span&gt; Package Manager is an open-source package management system which was originally designed for Red Hat Linux, but it is now supported on most Linux distributions. &lt;span class="caps"&gt;RPM&lt;/span&gt; packages can generally be of two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary &lt;span class="caps"&gt;RPM&lt;/span&gt;: A binary &lt;span class="caps"&gt;RPM&lt;/span&gt; contains the compiled binary of a complete application (or a library), and targets a particular architecture and may not be installable on all platforms. For example, an &lt;span class="caps"&gt;RPM&lt;/span&gt; compiled for the x86 architecture will not be compatible with &lt;span class="caps"&gt;ARM&lt;/span&gt; architecture, and vice-versa. It should be noted however that some binary RPMs can target multiple architectures, for example, when the underlying application is written in a platform-independent language, such as Python or Java. &lt;/li&gt;
&lt;li&gt;Source &lt;span class="caps"&gt;RPM&lt;/span&gt;: A source &lt;span class="caps"&gt;RPM&lt;/span&gt; contains the source code of an application, and a set of commands for creating its binary &lt;span class="caps"&gt;RPM&lt;/span&gt; on the target Linux environment. As the code present in an &lt;span class="caps"&gt;SRPM&lt;/span&gt; is not compiled, the created binary RPMs are termed as “noarch” as they are platform-independent and are generally more flexible, i.e. they allow modifying compile options, which can allow additional functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The Fedora project hosts an extensive &lt;a href="https://docs.fedoraproject.org/en-US/quick-docs/creating-rpm-packages/index.html"&gt;documentation&lt;/a&gt; on how to build RPMs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.1. &lt;span class="caps"&gt;RPM&lt;/span&gt; file components&lt;/h3&gt;
&lt;p&gt;There are four sections in an &lt;span class="caps"&gt;RPM&lt;/span&gt; file which contain information regarding the package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: The package name.&lt;/li&gt;
&lt;li&gt;Signature: Used to verify the authenticity of the package. It does so by applying a mathematical function on the header and archive sections of the file. There are numerous options available for the encryption method, such as &lt;span class="caps"&gt;PGP&lt;/span&gt; or &lt;span class="caps"&gt;MD5&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Header: The copyright information, package version numbers, package description, etc.&lt;/li&gt;
&lt;li&gt;Payload: The actual contents of the package, which are decompressed when the package is installed. The data in this section is compressed using &lt;code&gt;gzip&lt;/code&gt;. Upon decompression, the data is in &lt;code&gt;cpio&lt;/code&gt; format.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.2. &lt;span class="caps"&gt;RPM&lt;/span&gt; build procedure&lt;/h3&gt;
&lt;p&gt;Building an &lt;span class="caps"&gt;RPM&lt;/span&gt; can be accomplished using the &lt;code&gt;rpmbuild&lt;/code&gt; utility. In most cases, we only require the package source code and a spec file. The spec file is tailored for each package and contains the recipe for building the package.&lt;/p&gt;
&lt;p&gt;Listed below are the directories with a description of what they contain. These directories are created when building an &lt;span class="caps"&gt;RPM&lt;/span&gt; package:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;BUILD&lt;/span&gt;: The software build storage directory.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;RPMS&lt;/span&gt;: Binary &lt;span class="caps"&gt;RPM&lt;/span&gt; storage directory.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SOURCES&lt;/span&gt;: The package source code (e.g. as a tarball).&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SPECS&lt;/span&gt;: The spec file(s) for one or more RPMs.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SRPMS&lt;/span&gt;: Source &lt;span class="caps"&gt;RPM&lt;/span&gt; storage directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It is possible to place the package source code outside of the &lt;span class="caps"&gt;SOURCES&lt;/span&gt; directory and then providing the path in the &lt;code&gt;Source0&lt;/code&gt; tag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The essence of the &lt;span class="caps"&gt;RPM&lt;/span&gt; build process lies in the spec file, which contains information regarding the package, its version (and build) number, its changelog, etc. This information can later be queried using the &lt;code&gt;rpm&lt;/code&gt; command. In addition to this meta-information it also contains the instructions to build, install, and delete the package. The sections that are involved in the spec file are explained below.&lt;/p&gt;
&lt;h4&gt;1.2.1. Preamble section&lt;/h4&gt;
&lt;p&gt;This section contains the metadata of the package, which can later be queried using the &lt;code&gt;rpm -qi &amp;lt;package-name&amp;gt;&lt;/code&gt; command. An example section is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!?&lt;/span&gt;&lt;span class="nl"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;%define&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;el7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cern&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nl"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nl"&gt;Summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;belongs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;License&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;license&lt;/span&gt; &lt;span class="n"&gt;policy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;homepage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;Requires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;BuildRoot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;BuildArch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;architecture&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="s"&gt;"noarch"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nl"&gt;Source0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;Source1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nl"&gt;Patch0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;Patch1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nf"&gt;%description&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The &lt;span class="caps"&gt;RPM&lt;/span&gt; spec file provides numerous system and user-defined macros. User-defined macros follow the &lt;code&gt;%{&amp;lt;macro name&amp;gt;}&lt;/code&gt; syntax, whereas system macros are written without the curly braces, for example &lt;code&gt;%define&lt;/code&gt;. The macros section provides a detailed overview of the available macros.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1.2.2. Prep section&lt;/h4&gt;
&lt;p&gt;The prep or prepare section precedes the build section and defines the commands necessary for the build. If the source is specified using a tarball, the prep section is responsible for extracting it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%prep&lt;/span&gt;

&lt;span class="cp"&gt;# This step extracts the tarball.&lt;/span&gt;
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cq&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;%setup&lt;/code&gt; macro is used for unpacking the original sources in preparation for the build and can take the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-n &amp;lt;name&amp;gt;&lt;/code&gt;: Name of the software build directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt;: Suppress the displaying of files when unpacking sources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: Create the top-level build directory before unpacking the sources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt;: Do not delete the build directory prior to unpacking the sources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-T&lt;/code&gt;: Override the default unpacking scheme, used in combination with &lt;code&gt;-a&lt;/code&gt; (after) or &lt;code&gt;-b&lt;/code&gt; (before) option, for example:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;%setup -D -T -b 2&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;1.2.3. Build section&lt;/h4&gt;
&lt;p&gt;This section contains the commands to build the application. Since the build instructions are usually present in a separate file, this section is mostly empty.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%build&lt;/span&gt;

&lt;span class="cp"&gt;# Commands to build the application.&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;1.2.4. Install section&lt;/h4&gt;
&lt;p&gt;The install section is responsible for installing the application. In principal, this section should delete the build directory, i.e. remove previously installed files. The example below removes the build directory and then copies the build files of the package to &lt;code&gt;%{buildroot}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%install&lt;/span&gt;

&lt;span class="cp"&gt;# Remove the build directory. &lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# Create the build directory.&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# Move the &amp;lt;package&amp;gt;.service file.&lt;/span&gt;
&lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# Move the configuration files.&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Copy the build files.&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;1.2.5. Clean section&lt;/h4&gt;
&lt;p&gt;This section removes the build files created in the previous sections.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%clean&lt;/span&gt;

&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;1.2.6. Files section&lt;/h4&gt;
&lt;p&gt;The files section is used for marking configuration and documentation files, and to ensure file permissions and ownerships.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%files&lt;/span&gt;

&lt;span class="cp"&gt;# Mark the file as documentation.&lt;/span&gt;
&lt;span class="nf"&gt;%doc&lt;/span&gt; &lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;

&lt;span class="cp"&gt;# Set the attributes for the following directories and file.&lt;/span&gt;
&lt;span class="nf"&gt;%defattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cortex&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;
&lt;span class="nf"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noreplace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cortex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following directives can be used in this section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%doc&lt;/code&gt;: Flags the filename(s) that follow as part of the documentation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%config&lt;/code&gt;: Flags the specified file as being a configuration file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%attr&lt;/code&gt;: Sets the file permissions, its owner, and its group. It has the following syntax:
  &lt;code&gt;%attr(&amp;lt;mode&amp;gt;, &amp;lt;user&amp;gt;, &amp;lt;group&amp;gt;) &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%defattr&lt;/code&gt;: Sets the default attributes for files and directories (it has a similar syntax as &lt;code&gt;%attr&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%ghost&lt;/code&gt;: Marks file(s) to not be installed as part of the package (such as log files).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%verify&lt;/code&gt;: Verifies the integrity of installed files. It can take up to nine attributes:
  &lt;code&gt;%verify(mode md5 size maj min symlink mtime) &amp;lt;directory&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: There is another section &lt;code&gt;%changelog&lt;/code&gt; which is not mentioned here. It is used for keeping track of the changes made to the package, similar to Git history.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.3. Spec file macros&lt;/h3&gt;
&lt;p&gt;The &lt;span class="caps"&gt;RPM&lt;/span&gt; system provides numerous built-in macros for working with spec files. These macros allow generalizing the spec file, by allowing users to not hard-code directory paths, but instead allows providing them using macros.&lt;/p&gt;
&lt;p&gt;In addition to this, there also exist macros for debugging spec files. Some of these are listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%dump&lt;/code&gt;: Prints out the macro values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%{echo:message}&lt;/code&gt;: Prints message to stderr.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%{error:message}&lt;/code&gt;: Prints message to stderr and returns &lt;span class="caps"&gt;BADSPEC&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It is possible to reference tags as macros in various section of the spec file. For example, the “Name” tag can be referenced as &lt;code&gt;%{name}&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1.3.1. Defining new macros&lt;/h4&gt;
&lt;p&gt;To make the package management process easier, &lt;span class="caps"&gt;RPM&lt;/span&gt; allows creating custom macros using the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%define&lt;/span&gt; &lt;span class="n"&gt;macro_name&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It also allows expanding the result of shell commands using the &lt;code&gt;%(&amp;lt;command&amp;gt;)&lt;/code&gt; syntax. So to create a macro which holds the list of files present in the current directory, one could do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%define&lt;/span&gt; &lt;span class="n"&gt;list_files&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Custom-defined macros can later be referenced using the curly braces syntax. For example, the &lt;code&gt;list_files&lt;/code&gt; macro will be referenced as &lt;code&gt;%{list_files}&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;1.3.2. Passing parameters to macros&lt;/h4&gt;
&lt;p&gt;The macros can take one or more parameters, with the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%define&lt;/span&gt; &lt;span class="n"&gt;macro_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These parameters can be accessed using the following directives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%0&lt;/code&gt;: The macro name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%*&lt;/code&gt;: All parameters to the macro.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%#&lt;/code&gt;: The number of passed parameters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%1&lt;/code&gt;, &lt;code&gt;%2&lt;/code&gt;, […]: The first, second, and remaining parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Managing &lt;span class="caps"&gt;RPM&lt;/span&gt; builds with Koji&lt;/h3&gt;
&lt;p&gt;Koji is an &lt;span class="caps"&gt;RPM&lt;/span&gt; build system which was originally developed and is still used by the Fedora project as their main build system. It allows scheduling build tasks, provides build reproducibility, and versions the data. Under the hood, Koji uses &lt;a href="https://en.wikipedia.org/wiki/Yum_(software)"&gt;Yum&lt;/a&gt; and &lt;a href="https://github.com/rpm-software-management/mock/wiki"&gt;Mock&lt;/a&gt; to create the builds and provides a web interface for numerous tasks, such as viewing and cancelling builds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The web server can be configured to create a repository with each new tag, so whenever a build is completed and tagged, a new repository is created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The command line tool &lt;code&gt;koji&lt;/code&gt;  allows initiating the package build. It has the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;koji&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;srpm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example below shows how to initiate a build with some additional options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ koji --config&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;config file path&amp;gt; build --scratch --wait target rpmbuild/SRPMS/&amp;lt;package name&amp;gt;.src.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The options passed to this command are described below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--config&lt;/code&gt;: Koji config file path (a Mock config can be created with &lt;code&gt;koji mock-config&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--scratch&lt;/code&gt;: Builds the package without including it in the release.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--wait&lt;/code&gt;: Waits for the build to complete.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This command will create a new Koji task for this build, which can be tracked using the web interface. Another important task to perform is to tag the package (which allows organizing and filtering packages):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ koji tag-pkg &amp;lt;package name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Koji is made up of several components and provides numerous other features which are explained in the &lt;a href="https://docs.pagure.org/koji"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;3. Automating the build pipeline with continuous integration and deployment&lt;/h3&gt;
&lt;p&gt;Continuous integration (&lt;span class="caps"&gt;CI&lt;/span&gt;) is the process of automating the build, test, and deployment (this step is part of continuous deployment) process of an application. In case of GitLab, this is done using the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; script file which follows the &lt;span class="caps"&gt;YAML&lt;/span&gt; format and is present in the repository’s root directory. It is triggered each time an update is made to the code base.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Runners are isolated virtual machines which run the code defined in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;. The GitLab &lt;a href="https://docs.gitlab.com/ee/ci/runners/README.html"&gt;documentation&lt;/a&gt; explains how a runner can be configured.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;3.1. Defining variables and the base image&lt;/h4&gt;
&lt;p&gt;Variables allow generalizing the file, and can be used later on. The &lt;code&gt;image&lt;/code&gt; tag defines the base image to be used for running the pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;lt;base image url&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="nt"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'value'&lt;/span&gt;
 &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3.2. Defining stages&lt;/h4&gt;
&lt;p&gt;Before defining the jobs, all stages must be explicitly defined. A stage can run commands in sequence or in parallel. In lieu of building RPMs, the stages can be defined as below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;package&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;koji&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deploy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3.3. Defining jobs&lt;/h4&gt;
&lt;p&gt;A job defines a series of actions that must be performed when it is invoked. It can take numerous tags as options, such as the job stage, which allows sequencing the job order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;rpm_build_binary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Name of the job.&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*rpmbuild_deps&lt;/span&gt; &lt;span class="c1"&gt;# References a different job.&lt;/span&gt;
 &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# The scripts to execute.&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rpmbuild -bb $SPEC_FILE --define "dist $DIST" --define "_topdir $(pwd)/rpmbuild" --define "_sourcedir $(pwd)"&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rpm -qpl rpmbuild/RPMS/noarch/*&lt;/span&gt;
 &lt;span class="nt"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Do not execute the job for the following.&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tags&lt;/span&gt; &lt;span class="c1"&gt;# This job will not be executed when a new tag is created.&lt;/span&gt;
 &lt;span class="nt"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Lists the artifacts available to the job.&lt;/span&gt;
 &lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Paths available to the job.&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rpmbuild/RPMS/noarch/*&lt;/span&gt;
 &lt;span class="nt"&gt;expire_in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# The time period after which the job should expire.&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1 week&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: By default, all jobs run independently of each other, but dependency can be injected by introducing the &lt;code&gt;dependencies&lt;/code&gt; tag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;3.4. Cross-referencing jobs&lt;/h4&gt;
&lt;p&gt;The &lt;span class="caps"&gt;YAML&lt;/span&gt; format allows assigning an anchor to each job which can later be referenced in successive jobs, thus avoiding code duplication.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;.rpmbuild_deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;rpmbuild_deps&lt;/span&gt;
 &lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yum install -y rpm-build rpmdevtools redhat-rpm-config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;rpmbuild_deps&lt;/code&gt; job can now be expanded at a later stage using &lt;code&gt;&amp;lt;&amp;lt;: *rpmbuild_deps&lt;/code&gt; as shown in the previous section.&lt;/p&gt;
&lt;h4&gt;3.5. Hidden jobs&lt;/h4&gt;
&lt;p&gt;To hide a job so that it’s not processed by the GitLab-&lt;span class="caps"&gt;CI&lt;/span&gt; runner, the job’s name must be preceded with a dot (&lt;code&gt;.&lt;/code&gt;). This tells the runner to skip processing that job.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The &lt;a href="https://docs.gitlab.com/ee/ci/introduction/index.html"&gt;documentation&lt;/a&gt; on GitLab provides a good overview on the benefits and workflow of continuous integration and deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This blog post explained the build process of an &lt;span class="caps"&gt;RPM&lt;/span&gt; package using the &lt;code&gt;rpmbuild&lt;/code&gt; utility and provided a sample spec file which can be used for building the package. Koji was then introduced which serves as the task scheduler for building RPMs and for keeping a track history of all the running and completed jobs. Finally, it was shown how to automate the entire process using GitLab continuous integration.&lt;/p&gt;
&lt;p&gt;The next step, once the GitLab-&lt;span class="caps"&gt;CI&lt;/span&gt; pipeline is finished, can be to deploy the built &lt;span class="caps"&gt;RPM&lt;/span&gt; on a remote machine (or the cloud) using a configuration management tool, like &lt;a href="https://puppet.com"&gt;Puppet&lt;/a&gt;.&lt;/p&gt;</content><category term="Automation"></category></entry></feed>