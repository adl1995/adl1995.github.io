<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/home/adeel - automation</title><link href="/" rel="alternate"></link><link href="/feeds/automation.atom.xml" rel="self"></link><id>/</id><updated>2020-11-29T07:50:00+01:00</updated><entry><title>Passwordless logins with Yubikey</title><link href="/passwordless-logins-with-yubikey.html" rel="alternate"></link><published>2020-11-29T07:50:00+01:00</published><updated>2020-11-29T07:50:00+01:00</updated><author><name>Adeel Ahmad</name></author><id>tag:None,2020-11-29:/passwordless-logins-with-yubikey.html</id><summary type="html">&lt;p&gt;Yubikey is currently the de facto device for U2F authentication. It enables adding an extra layer of security on top of SSH, system login, signing GPG keys, and so on. It is also compatible with several other authentication methods, such as WebAuthn and PAM.&lt;/p&gt;
&lt;p&gt;This post will show how to leverage your Yubikey for unlocking the system lock-screen, both with and without using a password. It will then delve into how to automatically lock the screen when the Yubikey is unplugged.&lt;/p&gt;
&lt;p&gt;To achieve logins with Yubikeys we require a PAM configuration. PAM or Pluggable Authentication Modules define the authentication flow for common Linux utilities, such as &lt;code&gt;sudo&lt;/code&gt;, &lt;code&gt;su&lt;/code&gt;, and &lt;code&gt;passwd&lt;/code&gt;. We will override the default authentication flow for the &lt;a href="https://linux.die.net/man/1/xlock"&gt;xlock …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yubikey is currently the de facto device for U2F authentication. It enables adding an extra layer of security on top of SSH, system login, signing GPG keys, and so on. It is also compatible with several other authentication methods, such as WebAuthn and PAM.&lt;/p&gt;
&lt;p&gt;This post will show how to leverage your Yubikey for unlocking the system lock-screen, both with and without using a password. It will then delve into how to automatically lock the screen when the Yubikey is unplugged.&lt;/p&gt;
&lt;p&gt;To achieve logins with Yubikeys we require a PAM configuration. PAM or Pluggable Authentication Modules define the authentication flow for common Linux utilities, such as &lt;code&gt;sudo&lt;/code&gt;, &lt;code&gt;su&lt;/code&gt;, and &lt;code&gt;passwd&lt;/code&gt;. We will override the default authentication flow for the &lt;a href="https://linux.die.net/man/1/xlock"&gt;xlock&lt;/a&gt; lock manager to allow logins with Yubikey.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The above process should be similar across most lock managers, such as &lt;code&gt;i3lock&lt;/code&gt; or &lt;code&gt;xscreensaver&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Creating a PAM configuration&lt;/h2&gt;
&lt;p&gt;We shall first replicate the default authentication provided with xlock using PAM. With this configuration the user should only be able to log in with their password.&lt;/p&gt;
&lt;p&gt;All PAM configuration files lie under the &lt;code&gt;/etc/pam.d/&lt;/code&gt; directory. We create a file named &lt;code&gt;xlock&lt;/code&gt; which replicates the default authentication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat /etc/pam.d/xlock
&lt;span class="c1"&gt;#%PAM-1.0&lt;/span&gt;
auth            include         system-auth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: For the above configuration file to take effect the tool (&lt;code&gt;xlock&lt;/code&gt;) must be PAM compatible. We can confirm that &lt;code&gt;xlock&lt;/code&gt; is PAM compatible by inspecting the output of &lt;code&gt;ldd /usr/bin/xlock | grep libpam.so&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first comment line indicates the PAM version. The lines that follow define the authentication flow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auth&lt;/code&gt; is the module interface responsible for verifying the user's password.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt; is the PAM control flag which &lt;em&gt;includes&lt;/em&gt; the &lt;code&gt;system-auth&lt;/code&gt; configuration file (this file defines the default authentication flow). This flag can also be used to load modules, as we shall see later.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: There is an excellent &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/managing_smart_cards/pam_configuration_files"&gt;documentation&lt;/a&gt; provided by RedHat on PAM configuration files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Supporting Yubikey logins&lt;/h3&gt;
&lt;p&gt;We shall now add Yubikey login functionality to our PAM configuration, but we first need to install the Yubico module for PAM and set it up.&lt;/p&gt;
&lt;p&gt;Yubico, the company behind Yubikeys, exposes the &lt;a href="https://developers.yubico.com/yubico-pam/"&gt;pam_yubico.so&lt;/a&gt; module which can be used for Yubikey authentication.&lt;/p&gt;
&lt;p&gt;It provides two authentication mechanisms, the &lt;code&gt;client&lt;/code&gt; mode and the &lt;code&gt;challenge-response&lt;/code&gt; mode. The &lt;code&gt;client&lt;/code&gt; mode sends a request to the Yubico server for verifying the user's OTP, and requires an active Internet connection for the user to login. As this is inconvenient we shall only explore the &lt;code&gt;challenge-response&lt;/code&gt; mode in this post.&lt;/p&gt;
&lt;p&gt;Before proceeding with the configuration the &lt;code&gt;pam_yubico&lt;/code&gt; package must be installed manually. This package is easily available across most Linux distributions. On Arch Linux it can be installed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pacman -S yubico-pam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We next add Yubikey mappings before setting the challenge-response credential.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: It is recommended that you use a secondary account to perform the next steps as there is a risk of permanently locking your account (in case of PAM misconfiguration).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Adding mappings&lt;/h4&gt;
&lt;p&gt;Each Yubikey must be paired with a unique public ID which the &lt;code&gt;pam_yubico&lt;/code&gt; module uses to uniquely identify the user. The public ID consists of the first 12 characters extracted from the OTP token.&lt;/p&gt;
&lt;p&gt;To obtain your Yubikey's public ID open up your shell and press the Yubikey button. You will see a similar output as below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vvctffbvkhdnliklfhbbfiecudthfvrvuhnhtirehidr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now copy take the first 12 characters (&lt;code&gt;vvctffbvkhdn&lt;/code&gt;) and add them to a file named &lt;code&gt;yubikey_mappings&lt;/code&gt; in the &lt;code&gt;/etc/&lt;/code&gt; directory, along with your username. In our case this will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat /etc/yubikey_mappings
adeel:vvctffbvkhdn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This file also allows specifying multiple Yubikey mappings, each separated by a new line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Setting the challenge response credential&lt;/h4&gt;
&lt;p&gt;Yubikey needs to somehow verify the generated OTP (One Time Password) when it tries to authenticate the user. It does so by using the &lt;code&gt;challenge-response&lt;/code&gt; mode.&lt;/p&gt;
&lt;p&gt;To set up the &lt;code&gt;challenge-response&lt;/code&gt; mode, we first need to install the Yubikey manager tool called &lt;code&gt;ykman&lt;/code&gt;. On Arch Linux it can be installed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pacman -S yubikey-manger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;ykman&lt;/code&gt; tool will generate a secret credential and store it in a local file. Whenever the user tries to login with &lt;code&gt;xlock&lt;/code&gt;, the &lt;code&gt;pam_yubico&lt;/code&gt; module will verify the generated OTP against the stored credential.&lt;/p&gt;
&lt;p&gt;The challenge response credential can be set on slot 2 of the Yubikey with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ykman otp chalresp --generate &lt;span class="m"&gt;2&lt;/span&gt;
Using a randomly generated key: 29eb38b6f50b246c46f954af9710a77c78792114
Program a challenge-response credential &lt;span class="k"&gt;in&lt;/span&gt; slot &lt;span class="m"&gt;2&lt;/span&gt;? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;: y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: Ensure that the slot you're writing the data to doesn't already contain any credential, as it might not be recoverable!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After the &lt;code&gt;challenge-response&lt;/code&gt; credential is set it needs to be written to a local file which will be later read by &lt;code&gt;pam_yubico&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Yubico provides another tool called &lt;code&gt;ykpamcfg&lt;/code&gt; (which should be bundled with the &lt;code&gt;yubikey-manger&lt;/code&gt; package) to write this file to disk. It takes the Yubikey slot number as its parameter and writes the secret to a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ykpamcfg -2
Stored initial challenge and expected response &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/adeel/.yubico/challenge-&amp;lt;Serial ID&amp;gt;&amp;#39;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Updating the Linux PAM configuration&lt;/h3&gt;
&lt;p&gt;We shall now update the &lt;code&gt;/etc/pam.d/xlock&lt;/code&gt; file and add the Yubico PAM at the very beginning.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat /etc/pam.d/xlock
&lt;span class="c1"&gt;#%PAM-1.0&lt;/span&gt;

auth  sufficient  pam_yubico.so debug &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;challenge-response &lt;span class="nv"&gt;authfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/yubikey_mappings
auth  include     system-auth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We pass three parameters to the &lt;code&gt;pam_yubico.so&lt;/code&gt; module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug&lt;/code&gt; prints all the authentication steps to the console when the 'Enter' key is pressed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; specifies which mode the module will use for authentication (&lt;code&gt;challenge-response&lt;/code&gt; or &lt;code&gt;client&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;authfile&lt;/code&gt; points to the credential file written by the &lt;code&gt;ykpamcfg&lt;/code&gt; tool. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Setting the module type to &lt;code&gt;sufficient&lt;/code&gt; means that if Yubikey authentication succeeds, no further steps will be processed and the user will get logged in. This is the key point which enables passwordless logins. However, in the event of authentication failure, remaining authentication steps will still be applied, i.e. the user can still log in with their password if the Yubikey is not plugged in.&lt;/p&gt;
&lt;p&gt;If the module type is set to &lt;code&gt;required&lt;/code&gt; instead of &lt;code&gt;sufficient&lt;/code&gt; it will enable Two-Factor Authentication (2FA) which will require the user to plug in their Yubikey &lt;em&gt;and&lt;/em&gt; enter their password to login.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: For passwordless logins the user will need to press the &lt;code&gt;Enter&lt;/code&gt; with their Yubikey plugged in to unlock their screen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this stage you should be able unlock your screen with they Yubikey.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: You may need to replug your Yubikey for the changes to take effect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Automatically locking the screen when Yubikey is unplugged&lt;/h2&gt;
&lt;p&gt;Up till locking the screen still requires manually invoking the &lt;code&gt;xlock&lt;/code&gt; command. It would be nice if we can somehow automatically lock the screen whenever our Yubikey is unplugged. We can achieve this with Udev.&lt;/p&gt;
&lt;p&gt;Udev is the device manager used in Linux which can be used for a myriad of tasks. It tracks the state changes for all external devices, for example, it can be used to identify when a USB device is plugged or unplugged. Each device outputs a series of attributes which can be used to uniquely identify it.&lt;/p&gt;
&lt;p&gt;We shall use these attributes to create a Udev rule which triggers an &lt;code&gt;xlock.service&lt;/code&gt; Systemd service when the Yubikey is unplugged.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: We can also achieve this with a Shell script instead of Systemd, but Udev discourages executing long-running programs using scripts as it terminates them after a certain time period.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Creating the Systemd service&lt;/h3&gt;
&lt;p&gt;Systemd is the Linux service manager which can be used to launch user processes. We create a file named &lt;code&gt;xlock.service&lt;/code&gt; in the &lt;code&gt;/etc/systemd/system/&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat /etc/systemd/system/xlock.service
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xlock

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;adeel
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;simple
&lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;:0
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/xlock 

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Type=simple&lt;/code&gt; implies that this service does not exit after execution.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Environment&lt;/code&gt; tag specifies which display should be locked (&lt;code&gt;0&lt;/code&gt; is the default display).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ExecStart&lt;/code&gt; tag takes a path of the binary or script it will execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Consult the &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.service.html"&gt;official docs&lt;/a&gt; to explore Systemd in detail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Creating the Udev rule&lt;/h3&gt;
&lt;p&gt;We first need to identify a set of unique attributes for our device (Yubikey). The &lt;code&gt;udevadm&lt;/code&gt; tool allows monitoring Udev output whenever a device state changes. We shall invoke the following command and then remove our Yubikey:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ udevadm monitor --environment --udev 
monitor will print the received events &lt;span class="k"&gt;for&lt;/span&gt;:
UDEV - the event which udev sends out after rule processing

UDEV  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;461872&lt;/span&gt;.738673&lt;span class="o"&gt;]&lt;/span&gt; remove   /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2.1/1-2.1:1.0/0003:1050:0407.0157/input/input294/event18 &lt;span class="o"&gt;(&lt;/span&gt;input&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;remove
&lt;span class="nv"&gt;ID_VENDOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Yubico
&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;input
&lt;span class="nv"&gt;DEVNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/input/event18
&lt;span class="nv"&gt;ID_INPUT_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We only show a truncated output above, but once you have identified the attributes you would like to use, create a file named &lt;code&gt;yubikey-actions.rules&lt;/code&gt; in the &lt;code&gt;/etc/udev/rules.d/&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat /etc/udev/rules.d/yubikey-actions.rules 
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;remove&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_MODEL_ID&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0407&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_VENDOR_ID&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1050&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;RUN&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/systemctl start xlock.service&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It might be worthwhile to reload the configuration for both Systemd and Udev:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;udevadm&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If everything worked out fine your screen should now get locked whenever you remove your Yubikey.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fedoraproject.org/wiki/Using_Yubikeys_with_Fedora#Using_a_Yubikey_to_authenticate_to_a_machine_running_Fedora"&gt;Using a Yubikey to authenticate to a machine running Fedora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocramius.github.io/blog/yubikey-for-ssh-gpg-git-and-local-login/"&gt;YubiKey for SSH, Login, 2FA, GPG and Git Signing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.fraggod.net/2015/01/12/starting-systemd-service-instance-for-device-from-udev.html"&gt;Starting systemd service instance for device from udev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="automation"></category></entry><entry><title>Plotting graphical data using RRDtool and a Python Collectd plugin</title><link href="/plotting-graphical-data-using-rrdtool-and-a-python-collectd-plugin.html" rel="alternate"></link><published>2020-05-11T11:02:00+02:00</published><updated>2020-05-11T11:02:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:None,2020-05-11:/plotting-graphical-data-using-rrdtool-and-a-python-collectd-plugin.html</id><summary type="html">&lt;!-- Date: 2019-05-30 07:57 --&gt;
&lt;!-- Title: Using RRDtool and a Python Collectd plugin to graph weather data --&gt;
&lt;!-- Title: Plotting graphs data from a Python Collectd plugin using RRDtool --&gt;

&lt;p&gt;Collectd is Unix daemon used for periodically collecting system usage statistics, which can include identifying CPU or memory bottleneck issues. The collected data can then be transformed to graphs using &lt;a href="https://oss.oetiker.ch/rrdtool"&gt;RRDtool&lt;/a&gt; or a &lt;a href="https://en.wikipedia.org/wiki/Grafana"&gt;Grafana&lt;/a&gt; dashboard (Grafana provides real time graphs and complex search queries).&lt;/p&gt;
&lt;p&gt;The daemon itself is modular and functions through external plugins with each plugin performing a distinct function. This post will explore a plugin which &lt;em&gt;collects weather information of a given city&lt;/em&gt;. The first section will explain how the plugin configuration works and how to plot a graph of the output data using RRDtool. Finally, we will delve into the plugin internals and see how it is written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: For an intro on how to setup Collectd …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;!-- Date: 2019-05-30 07:57 --&gt;
&lt;!-- Title: Using RRDtool and a Python Collectd plugin to graph weather data --&gt;
&lt;!-- Title: Plotting graphs data from a Python Collectd plugin using RRDtool --&gt;

&lt;p&gt;Collectd is Unix daemon used for periodically collecting system usage statistics, which can include identifying CPU or memory bottleneck issues. The collected data can then be transformed to graphs using &lt;a href="https://oss.oetiker.ch/rrdtool"&gt;RRDtool&lt;/a&gt; or a &lt;a href="https://en.wikipedia.org/wiki/Grafana"&gt;Grafana&lt;/a&gt; dashboard (Grafana provides real time graphs and complex search queries).&lt;/p&gt;
&lt;p&gt;The daemon itself is modular and functions through external plugins with each plugin performing a distinct function. This post will explore a plugin which &lt;em&gt;collects weather information of a given city&lt;/em&gt;. The first section will explain how the plugin configuration works and how to plot a graph of the output data using RRDtool. Finally, we will delve into the plugin internals and see how it is written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: For an intro on how to setup Collectd, refer to this &lt;a href="https://collectd.org/wiki/index.php/First_steps"&gt;wiki&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Plugin configuration&lt;/h2&gt;
&lt;p&gt;All enabled Collectd plugins must be listed in the &lt;code&gt;collectd.conf&lt;/code&gt; file. The default file paths used by Collectd can be viewed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ collectd -h

Builtin defaults:
  Config file       /etc/collectd.conf
  PID file          /var/run/collectd.pid
  Plugin directory  /usr/lib/collectd
  Data directory    /var/lib/collectd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The plugins lie under the &lt;code&gt;/usr/lib/collectd&lt;/code&gt; directory, by default.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Python plugins might not work when placed under the default plugin directory, as this causes anomalies when importing external modules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Invoking the plugin&lt;/h3&gt;
&lt;p&gt;Let's say we have a script named &lt;code&gt;log-weather.py&lt;/code&gt; which we want to periodically call using Collectd. We first need to change its path to our custom plugins directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cp /path/to/log-weather.py /usr/lib/collectd/python/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we will add this plugin to our &lt;code&gt;/etc/collectd.conf&lt;/code&gt; config file. We also need to load the Python plugin (this exposes the &lt;code&gt;collectd&lt;/code&gt; Python module which we then import in our script):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;span class="n"&gt;LoadPlugin&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="na"&gt;&amp;lt;Plugin python&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;ModulePath&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/collectd/python/&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;log-weather&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Module&lt;/span&gt; &lt;span class="nn"&gt;weather_logger&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;CITY&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;&amp;lt;city&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;api_key&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;&amp;lt;/Plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The import structure remains similar for all Python plugins, except for the module path, the module name, and its configuration parameters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Import&lt;/code&gt; directive: This takes the script name as its value. Notice how this differs from the module name in the following line. We'll see this in detail in a later &lt;a href="#weather-logger-plugin"&gt;section&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Module&lt;/code&gt; tag: This module requires two configuration parameters, &lt;code&gt;CITY&lt;/code&gt; and &lt;code&gt;API_KEY&lt;/code&gt;. It calls an external API with the given key to collect the weather information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Enabling RRDtool&lt;/h4&gt;
&lt;p&gt;As we intend to plot the collected data at the end, we will enable the RRDtool plugin. This plugin enables writing the data dispatched by our script to an RRD (Round Robin Database) file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;LoadPlugin&lt;/span&gt; &lt;span class="n"&gt;rrdtool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Setting the call interval&lt;/h4&gt;
&lt;p&gt;In our &lt;code&gt;/etc/collectd.conf&lt;/code&gt; file we can tweak the frequency by which our plugin is called with the &lt;code&gt;Interval&lt;/code&gt; directive. This expects a value in seconds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Interval 1800
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our script will now collect the weather information every 1800 seconds, or every half an hour.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It is also possible to set the interval for each plugin separately. This requires setting the interval in the &lt;code&gt;register_read&lt;/code&gt; function, which we will see later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Starting the Collectd service&lt;/h3&gt;
&lt;p&gt;Once the configuration is done, we must (re)start the Collectd service using &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: this step might be different based on your Linux distribution. Consult the &lt;a href="https://collectd.org/wiki/index.php/First_steps"&gt;Collectd Wiki&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enabling the Collectd &lt;code&gt;systemd&lt;/code&gt; service will start Collectd when the user logs in on their computer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ systemctl start collectd
$ systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; collectd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Plotting the data&lt;/h3&gt;
&lt;p&gt;As soon as the Collectd service is running, data will be written to the RRD file using the RRDtool plugin which we enabled earlier. This data is stored inside the data directory, which in our case is &lt;code&gt;/var/lib/collectd/home/weather_alert/temperature.rrd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To plot this data we will use the &lt;code&gt;rrdtool&lt;/code&gt; Linux utility. (This tool is different from the one used by Collectd, which uses the &lt;code&gt;librrd&lt;/code&gt; API for writing the data.) We will first view the information written to the &lt;code&gt;temperature.rrd&lt;/code&gt; file with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rrdtool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rrd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;rrd_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;0003&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;last_update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1589090986&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;header_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3496&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;GAUGE&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then proceed with creating the graph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ rrdtool graph weather.png &lt;span class="se"&gt;\ &lt;/span&gt;          &lt;span class="c1"&gt;# (1)&lt;/span&gt;
  --title &lt;span class="s2"&gt;&amp;quot;Weather (Athens)&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\ &lt;/span&gt;         &lt;span class="c1"&gt;# (2)&lt;/span&gt;
  --vertical-label &lt;span class="s2"&gt;&amp;quot;Temperature (°C)&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="c1"&gt;# (3)&lt;/span&gt;
  --start now-8000s --end now &lt;span class="se"&gt;\ &lt;/span&gt;        &lt;span class="c1"&gt;# (4)&lt;/span&gt;
  DEF:a&lt;span class="o"&gt;=&lt;/span&gt;temperature.rrd:value:AVERAGE   &lt;span class="c1"&gt;# (5)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It produces this result:&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/weather-rrdtool.png" style="width:600px;"/&gt;
&lt;/p&gt;

&lt;p&gt;Let's go over the above command in detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We specify the name for the output graph.&lt;/li&gt;
&lt;li&gt;This title appears at the top of the graph.&lt;/li&gt;
&lt;li&gt;The vertical label appears to the left of our x-axis.&lt;/li&gt;
&lt;li&gt;Each graph has a start and end time which can be provided either as a relative or absolute timestamp value. &lt;code&gt;now-7200s&lt;/code&gt; means that we will view weather statistics from the past 2 hours up till now.&lt;/li&gt;
&lt;li&gt;The DEF directive defines the graph variable &lt;code&gt;a&lt;/code&gt;, which is followed by this pattern &lt;code&gt;&amp;lt;source file&amp;gt;:&amp;lt;key&amp;gt;:&amp;lt;metric&amp;gt;&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;source file&amp;gt;&lt;/code&gt; contains the path to the RRD file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; is what we saw in the &lt;code&gt;rrdtool info&lt;/code&gt; command as &lt;code&gt;ds[value]&lt;/code&gt;. In this case we will plot the &lt;code&gt;value&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;metric&amp;gt;&lt;/code&gt; is usually either &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, or &lt;code&gt;AVERAGE&lt;/code&gt;. It is also visible in the &lt;code&gt;info&lt;/code&gt; output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: this tool can produce some &lt;a href="https://oss.oetiker.ch/rrdtool/gallery/index.en.html"&gt;very complex graphs&lt;/a&gt;, but for our use case we will just stick with a simple line graph.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having configured the script we will now go over the plugin structure and see how the weather collection script is written.&lt;/p&gt;
&lt;h2&gt;&lt;a name="weather-logger-plugin"&gt;&lt;/a&gt; Weather Logger plugin&lt;/h2&gt;
&lt;p&gt;The Python Collectd plugin begins by importing the &lt;code&gt;collectd&lt;/code&gt; module. It then defines a series of callback functions. For our use case we will only define a &lt;code&gt;config&lt;/code&gt; and a &lt;code&gt;read&lt;/code&gt; callback function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collectd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;PLUGIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;weather_alert&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# placeholders&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;config_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;CITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_KEY&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;city&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;CITY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;CITY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; plugin: [Error] The city name must be provided&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PLUGIN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; plugin: [Error] The API key must be provided&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PLUGIN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The configuration function above sets the &lt;code&gt;CITY&lt;/code&gt; and &lt;code&gt;API_KEY&lt;/code&gt; variables that we passed over from the config file. Later on we will see how to view Collectd logs.&lt;/p&gt;
&lt;p&gt;We now define the &lt;code&gt;read_callback&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_callback&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;weather&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://api.openweathermap.org/data/2.5/forecast?q=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;CITY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;units=metric&amp;amp;appid=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;weather_metric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PLUGIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;temperature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;weather_metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;temp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;weather_metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; plugin: [Error] Unable to run &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We call the OpenWeatherMap API for collecting the data. The &lt;code&gt;collectd.Values()&lt;/code&gt; function registers the plugin name which we later reference in the config file. The &lt;code&gt;weather_metric.dispatch()&lt;/code&gt; function is what writes the data to the RRD file.&lt;/p&gt;
&lt;p&gt;The final step is to register these two functions with the &lt;code&gt;collectd&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Diagnosing plugin issues&lt;/h2&gt;
&lt;p&gt;Let's try removing the &lt;code&gt;CITY&lt;/code&gt; from our &lt;code&gt;/etc/collectd.conf&lt;/code&gt; configuration file and see if it raises any errors. We restart the Collectd service and check its status:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;●&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;System&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;statistics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;Loaded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loaded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;May&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;29390&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;weather_alert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;provided&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can also be helpful to view the full logs for more details. By default, these are present in the &lt;code&gt;/var/log/collectd.log&lt;/code&gt; file.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.dbrgn.ch/2017/3/10/write-a-collectd-python-plugin"&gt;https://blog.dbrgn.ch/2017/3/10/write-a-collectd-python-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontier.town/2017/10/collectd-and-rrdtool"&gt;https://frontier.town/2017/10/collectd-and-rrdtool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/twolfson/ad3bb967d37dd140382d"&gt;https://gist.github.com/twolfson/ad3bb967d37dd140382d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="automation"></category></entry><entry><title>Programmatically organising your backpacking trip using Google My Maps</title><link href="/programmatically-organising-your-backpacking-trip-using-google-my-maps.html" rel="alternate"></link><published>2019-05-30T09:14:00+02:00</published><updated>2019-05-30T09:14:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:None,2019-05-30:/programmatically-organising-your-backpacking-trip-using-google-my-maps.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;This blog post has been converted from a &lt;a href="https://docs.google.com/presentation/d/10NlBmnUk7qsh0nPso3Lqg8OvoP6CZg8sHJx1gllHem4/edit#slide=id.g577465d654_0_0"&gt;presentation&lt;/a&gt; I gave during the &lt;a href="https://indico.cern.ch/event/771113/overview"&gt;Thematic CERN School of Computing 2019&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When planning a journey to a new country or a city it helps to mark down all the places you would like to visit and eventually create a travel plan for each day. I personally use Google Maps for finding places of interest including historical buildings, museums, and libraries. As an example, if I was to visit say Split, Croatia I could search for "places to visit split" on Google Maps. It will then list all the attractions based on features such as reviews and popularity.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/google-my-maps/things-to-do-split.png" alt="Things to do in Split" style="width:300px;"/&gt;
&lt;/p&gt;

&lt;p&gt;Although it is possible to individually "Save" each place in Google Maps, it does not …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This blog post has been converted from a &lt;a href="https://docs.google.com/presentation/d/10NlBmnUk7qsh0nPso3Lqg8OvoP6CZg8sHJx1gllHem4/edit#slide=id.g577465d654_0_0"&gt;presentation&lt;/a&gt; I gave during the &lt;a href="https://indico.cern.ch/event/771113/overview"&gt;Thematic CERN School of Computing 2019&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When planning a journey to a new country or a city it helps to mark down all the places you would like to visit and eventually create a travel plan for each day. I personally use Google Maps for finding places of interest including historical buildings, museums, and libraries. As an example, if I was to visit say Split, Croatia I could search for "places to visit split" on Google Maps. It will then list all the attractions based on features such as reviews and popularity.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/google-my-maps/things-to-do-split.png" alt="Things to do in Split" style="width:300px;"/&gt;
&lt;/p&gt;

&lt;p&gt;Although it is possible to individually "Save" each place in Google Maps, it does not allow customisability options including categorisation of places and marking places based on personal interests.&lt;/p&gt;
&lt;h3&gt;Google My Maps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.google.com/mymaps"&gt;Google My Maps&lt;/a&gt; is a tool which allows creating custom maps and is useful for planning trips, marking hiking routes, and other sports activities. It also allows sharing the map either publicly or privately. Some of its features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updating the base map to satellite or street view&lt;/li&gt;
&lt;li&gt;Personalising the map by styling the icons and changing their color&lt;/li&gt;
&lt;li&gt;Importing data from a spreadsheet including CSV, XML, and KML files&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Adding a new entry&lt;/h4&gt;
&lt;p&gt;The manual process for adding a new entry involves finding a location using the search bar and then adding it to the map layer which places a waypoint icon on the base map.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/google-my-maps/adding-entry.png" alt="Adding entry" style="width:500px;"/&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;layer&lt;/em&gt; is Google My Map's way of categorising different topics, for example, there can be a separate layer for different cities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This, however, is a tedious and repetitive task, which can be done programmatically using Python.&lt;/p&gt;
&lt;h4&gt;Adding entries using Google Maps API&lt;/h4&gt;
&lt;p&gt;In principal, if we have a spreadsheet with a list of places, the only task left is to import these places into our custom map. Thus we require a way of automating the process of creating this spreadsheet.&lt;/p&gt;
&lt;p&gt;The Google Maps API provides an elegant way of querying the data using their Places API. For example, to get a list of places to visit in Split, the request can be formatted as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;https&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;maps&lt;/span&gt;.&lt;span class="nv"&gt;googleapis&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;maps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;place&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;textsearch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;json&lt;/span&gt;?&lt;span class="nv"&gt;query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;things&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;split&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;en&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This returns a JSON object containing a list of places. Each record contains the place name, its latitude, longitude, address, icon, etc. &lt;/p&gt;
&lt;p&gt;The code block below sends a GET request to the server, and then performs four major steps including getting the &lt;code&gt;result&lt;/code&gt; object, enumerating through the places list and then writing the appropriate entries to a CSV file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Fetch the data.&lt;/span&gt;
&lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://maps.googleapis.com/maps/api/place/textsearch/json?query=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;language=en&amp;amp;key=API_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Convert the response to a JSON object.&lt;/span&gt;
&lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Note: in this case we only keep the these three columns, but we can further populate the CSV file with the place description, its rating, and so on...&lt;/span&gt;
&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;coordinates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;icon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Write the data to a CSV file.&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;places/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;icon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Invoking the script&lt;/h4&gt;
&lt;p&gt;To get a list of all the places to visit in Split:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python fetch-google-maps.py &lt;span class="s2"&gt;&amp;quot;things to do split&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will generate a CSV file called &lt;code&gt;Things To Do Split.csv&lt;/code&gt; in the &lt;code&gt;places&lt;/code&gt; sub-directory.&lt;/p&gt;
&lt;h4&gt;Importing the file&lt;/h4&gt;
&lt;p&gt;Google My Maps supports populates the map from CSV, XML, KML, and GPL files. Instead of using coordinates (as we do in this case) we can also use street addresses.&lt;/p&gt;
&lt;p&gt;To import the file, create a new layer in your custom map and use the "Import" utility. A window will pop up prompting for the file upload. Note that you will need to guide Google My Maps by marking the columns that correspond to the place name and its coordinates.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/google-my-maps/lat-lon-prompt.png" alt="Coordinates" style="width:350px;"/&gt;
    &lt;img src="/images/google-my-maps/title-prompt.png" alt="Title" style="width:350px;"/&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: By default, if there are more than 10 items in the CSV file Google My Maps will group them all under a single entry. To view each item separately select the "Uniform style" option and update "group places by" dropdown to "Individual styles".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Limitations&lt;/h3&gt;
&lt;p&gt;Although our map is now populated with the landmark icons at their correct positions, they are not yet styled and all have the same icon. They are also not color coded which makes it difficult to keep track of all the places to visit on a particular day (changing the icon also allows quick identification, e.g. a museum or library should be clearly distinguishable). A fully styled map may look like:&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/google-my-maps/map-simple.png" alt="Map simple" style="width:350px;"/&gt;
    &lt;img src="/images/google-my-maps/map-styled.png" alt="Map styled" style="width:400px;"/&gt;
&lt;/p&gt;

&lt;p&gt;I could not find a way to embed this information within the CSV file, so this step still has to be done manually. Another limitation with Google My Maps is that it is not possible to import multiple CSV files into a single layer (thus requiring us to merge the files before importing them).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A styled map from one of my recent trips can be seen &lt;a href="https://drive.google.com/open?id=1OdZq0vA46Oi8sny75zG0Z-MNVURjCSh6&amp;amp;usp=sharing"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;Source code: &lt;a href="https://gist.github.com/adl1995/a66fa3532364ff87aaaec72be332abe7"&gt;https://gist.github.com/adl1995/a66fa3532364ff87aaaec72be332abe7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blog: &lt;a href="https://www.google.com/earth/outreach/learn/visualize-your-data-on-a-custom-map-using-google-my-maps"&gt;https://www.google.com/earth/outreach/learn/visualize-your-data-on-a-custom-map-using-google-my-maps&lt;/a&gt;&lt;/p&gt;</content><category term="Automation"></category></entry><entry><title>Building RPM packages with rpmbuild, Koji, and GitLab-CI</title><link href="/building-rpm-packages-with-rpmbuild-koji-and-gitlab-ci.html" rel="alternate"></link><published>2019-05-06T08:24:00+02:00</published><updated>2019-05-06T08:24:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:None,2019-05-06:/building-rpm-packages-with-rpmbuild-koji-and-gitlab-ci.html</id><summary type="html">&lt;p&gt;The RPM system facilitates the user to query and update a software package. It also allows examining package interdependencies, and verifying package file permissions. This blog post will describe the process of building an RPM package using the &lt;code&gt;rpmbuild&lt;/code&gt; utility and will then explain how to schedule build tasks using Koji. Finally, it will describe how to automate the build pipeline using continuous integration in GitLab.&lt;/p&gt;
&lt;h3&gt;1. RPM Package Manager&lt;/h3&gt;
&lt;p&gt;RPM Package Manager is an open-source package management system which was originally designed for Red Hat Linux, but it is now supported on most Linux distributions. RPM packages can generally be of two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary RPM: A binary RPM contains the compiled binary of a complete application (or a library …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The RPM system facilitates the user to query and update a software package. It also allows examining package interdependencies, and verifying package file permissions. This blog post will describe the process of building an RPM package using the &lt;code&gt;rpmbuild&lt;/code&gt; utility and will then explain how to schedule build tasks using Koji. Finally, it will describe how to automate the build pipeline using continuous integration in GitLab.&lt;/p&gt;
&lt;h3&gt;1. RPM Package Manager&lt;/h3&gt;
&lt;p&gt;RPM Package Manager is an open-source package management system which was originally designed for Red Hat Linux, but it is now supported on most Linux distributions. RPM packages can generally be of two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary RPM: A binary RPM contains the compiled binary of a complete application (or a library), and targets a particular architecture and may not be installable on all platforms. For example, an RPM compiled for the x86 architecture will not be compatible with ARM architecture, and vice-versa. It should be noted however that some binary RPMs can target multiple architectures, for example, when the underlying application is written in a platform-independent language, such as Python or Java. &lt;/li&gt;
&lt;li&gt;Source RPM: A source RPM contains the source code of an application, and a set of commands for creating its binary RPM on the target Linux environment. As the code present in an SRPM is not compiled, the created binary RPMs are termed as "noarch" as they are platform-independent and are generally more flexible, i.e. they allow modifying compile options, which can allow additional functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The Fedora project hosts an extensive &lt;a href="https://docs.fedoraproject.org/en-US/quick-docs/creating-rpm-packages/index.html"&gt;documentation&lt;/a&gt; on how to build RPMs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.1. RPM file components&lt;/h3&gt;
&lt;p&gt;There are four sections in an RPM file which contain information regarding the package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: The package name.&lt;/li&gt;
&lt;li&gt;Signature: Used to verify the authenticity of the package. It does so by applying a mathematical function on the header and archive sections of the file. There are numerous options available for the encryption method, such as PGP or MD5.&lt;/li&gt;
&lt;li&gt;Header: The copyright information, package version numbers, package description, etc.&lt;/li&gt;
&lt;li&gt;Payload: The actual contents of the package, which are decompressed when the package is installed. The data in this section is compressed using &lt;code&gt;gzip&lt;/code&gt;. Upon decompression, the data is in &lt;code&gt;cpio&lt;/code&gt; format.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.2. RPM build procedure&lt;/h3&gt;
&lt;p&gt;Building an RPM can be accomplished using the &lt;code&gt;rpmbuild&lt;/code&gt; utility. In most cases, we only require the package source code and a spec file. The spec file is tailored for each package and contains the recipe for building the package.&lt;/p&gt;
&lt;p&gt;Listed below are the directories with a description of what they contain. These directories are created when building an RPM package:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BUILD: The software build storage directory.&lt;/li&gt;
&lt;li&gt;RPMS: Binary RPM storage directory.&lt;/li&gt;
&lt;li&gt;SOURCES: The package source code (e.g. as a tarball).&lt;/li&gt;
&lt;li&gt;SPECS: The spec file(s) for one or more RPMs.&lt;/li&gt;
&lt;li&gt;SRPMS: Source RPM storage directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It is possible to place the package source code outside of the SOURCES directory and then providing the path in the &lt;code&gt;Source0&lt;/code&gt; tag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The essence of the RPM build process lies in the spec file, which contains information regarding the package, its version (and build) number, its changelog, etc. This information can later be queried using the &lt;code&gt;rpm&lt;/code&gt; command. In addition to this meta-information it also contains the instructions to build, install, and delete the package. The sections that are involved in the spec file are explained below.&lt;/p&gt;
&lt;h4&gt;1.2.1. Preamble section&lt;/h4&gt;
&lt;p&gt;This section contains the metadata of the package, which can later be queried using the &lt;code&gt;rpm -qi &amp;lt;package-name&amp;gt;&lt;/code&gt; command. An example section is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!?&lt;/span&gt;&lt;span class="nl"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;%define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;el7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cern&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;Summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;belongs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;License&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;policy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;homepage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Requires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;BuildRoot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;BuildArch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;architecture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;noarch&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;Source0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Source1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;Patch0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Patch1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;%description&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The RPM spec file provides numerous system and user-defined macros. User-defined macros follow the &lt;code&gt;%{&amp;lt;macro name&amp;gt;}&lt;/code&gt; syntax, whereas system macros are written without the curly braces, for example &lt;code&gt;%define&lt;/code&gt;. The macros section provides a detailed overview of the available macros.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1.2.2. Prep section&lt;/h4&gt;
&lt;p&gt;The prep or prepare section precedes the build section and defines the commands necessary for the build. If the source is specified using a tarball, the prep section is responsible for extracting it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%prep&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# This step extracts the tarball.&lt;/span&gt;
&lt;span class="nf"&gt;%setup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cq&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;%setup&lt;/code&gt; macro is used for unpacking the original sources in preparation for the build and can take the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-n &amp;lt;name&amp;gt;&lt;/code&gt;: Name of the software build directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt;: Suppress the displaying of files when unpacking sources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: Create the top-level build directory before unpacking the sources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt;: Do not delete the build directory prior to unpacking the sources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-T&lt;/code&gt;: Override the default unpacking scheme, used in combination with &lt;code&gt;-a&lt;/code&gt; (after) or &lt;code&gt;-b&lt;/code&gt; (before) option, for example:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;%setup -D -T -b 2&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;1.2.3. Build section&lt;/h4&gt;
&lt;p&gt;This section contains the commands to build the application. Since the build instructions are usually present in a separate file, this section is mostly empty.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%build&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Commands to build the application.&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;1.2.4. Install section&lt;/h4&gt;
&lt;p&gt;The install section is responsible for installing the application. In principal, this section should delete the build directory, i.e. remove previously installed files. The example below removes the build directory and then copies the build files of the package to &lt;code&gt;%{buildroot}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%install&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Remove the build directory. &lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Create the build directory.&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Move the &amp;lt;package&amp;gt;.service file.&lt;/span&gt;
&lt;span class="n"&gt;mv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Move the configuration files.&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;mv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Copy the build files.&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;1.2.5. Clean section&lt;/h4&gt;
&lt;p&gt;This section removes the build files created in the previous sections.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%clean&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;1.2.6. Files section&lt;/h4&gt;
&lt;p&gt;The files section is used for marking configuration and documentation files, and to ensure file permissions and ownerships.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%files&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Mark the file as documentation.&lt;/span&gt;
&lt;span class="nf"&gt;%doc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;# Set the attributes for the following directories and file.&lt;/span&gt;
&lt;span class="nf"&gt;%defattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cortex&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noreplace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cortex&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following directives can be used in this section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%doc&lt;/code&gt;: Flags the filename(s) that follow as part of the documentation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%config&lt;/code&gt;: Flags the specified file as being a configuration file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%attr&lt;/code&gt;: Sets the file permissions, its owner, and its group. It has the following syntax:
  &lt;code&gt;%attr(&amp;lt;mode&amp;gt;, &amp;lt;user&amp;gt;, &amp;lt;group&amp;gt;) &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%defattr&lt;/code&gt;: Sets the default attributes for files and directories (it has a similar syntax as &lt;code&gt;%attr&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%ghost&lt;/code&gt;: Marks file(s) to not be installed as part of the package (such as log files).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%verify&lt;/code&gt;: Verifies the integrity of installed files. It can take up to nine attributes:
  &lt;code&gt;%verify(mode md5 size maj min symlink mtime) &amp;lt;directory&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: There is another section &lt;code&gt;%changelog&lt;/code&gt; which is not mentioned here. It is used for keeping track of the changes made to the package, similar to Git history.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.3. Spec file macros&lt;/h3&gt;
&lt;p&gt;The RPM system provides numerous built-in macros for working with spec files. These macros allow generalizing the spec file, by allowing users to not hard-code directory paths, but instead allows providing them using macros.&lt;/p&gt;
&lt;p&gt;In addition to this, there also exist macros for debugging spec files. Some of these are listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%dump&lt;/code&gt;: Prints out the macro values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%{echo:message}&lt;/code&gt;: Prints message to stderr.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%{error:message}&lt;/code&gt;: Prints message to stderr and returns BADSPEC.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It is possible to reference tags as macros in various section of the spec file. For example, the "Name" tag can be referenced as &lt;code&gt;%{name}&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1.3.1. Defining new macros&lt;/h4&gt;
&lt;p&gt;To make the package management process easier, RPM allows creating custom macros using the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;macro_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It also allows expanding the result of shell commands using the &lt;code&gt;%(&amp;lt;command&amp;gt;)&lt;/code&gt; syntax. So to create a macro which holds the list of files present in the current directory, one could do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Custom-defined macros can later be referenced using the curly braces syntax. For example, the &lt;code&gt;list_files&lt;/code&gt; macro will be referenced as &lt;code&gt;%{list_files}&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;1.3.2. Passing parameters to macros&lt;/h4&gt;
&lt;p&gt;The macros can take one or more parameters, with the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;macro_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These parameters can be accessed using the following directives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%0&lt;/code&gt;: The macro name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%*&lt;/code&gt;: All parameters to the macro.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%#&lt;/code&gt;: The number of passed parameters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%1&lt;/code&gt;, &lt;code&gt;%2&lt;/code&gt;, [...]: The first, second, and remaining parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Managing RPM builds with Koji&lt;/h3&gt;
&lt;p&gt;Koji is an RPM build system which was originally developed and is still used by the Fedora project as their main build system. It allows scheduling build tasks, provides build reproducibility, and versions the data. Under the hood, Koji uses &lt;a href="https://en.wikipedia.org/wiki/Yum_(software)"&gt;Yum&lt;/a&gt; and &lt;a href="https://github.com/rpm-software-management/mock/wiki"&gt;Mock&lt;/a&gt; to create the builds and provides a web interface for numerous tasks, such as viewing and cancelling builds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The web server can be configured to create a repository with each new tag, so whenever a build is completed and tagged, a new repository is created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The command line tool &lt;code&gt;koji&lt;/code&gt;  allows initiating the package build. It has the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;koji&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;srpm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The example below shows how to initiate a build with some additional options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ koji --config&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;config file path&amp;gt; build --scratch --wait target rpmbuild/SRPMS/&amp;lt;package name&amp;gt;.src.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The options passed to this command are described below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--config&lt;/code&gt;: Koji config file path (a Mock config can be created with &lt;code&gt;koji mock-config&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--scratch&lt;/code&gt;: Builds the package without including it in the release.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--wait&lt;/code&gt;: Waits for the build to complete.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This command will create a new Koji task for this build, which can be tracked using the web interface. Another important task to perform is to tag the package (which allows organizing and filtering packages):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ koji tag-pkg &amp;lt;package name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Koji is made up of several components and provides numerous other features which are explained in the &lt;a href="https://docs.pagure.org/koji"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;3. Automating the build pipeline with continuous integration and deployment&lt;/h3&gt;
&lt;p&gt;Continuous integration (CI) is the process of automating the build, test, and deployment (this step is part of continuous deployment) process of an application. In case of GitLab, this is done using the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; script file which follows the YAML format and is present in the repository's root directory. It is triggered each time an update is made to the code base.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Runners are isolated virtual machines which run the code defined in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;. The GitLab &lt;a href="https://docs.gitlab.com/ee/ci/runners/README.html"&gt;documentation&lt;/a&gt; explains how a runner can be configured.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;3.1. Defining variables and the base image&lt;/h4&gt;
&lt;p&gt;Variables allow generalizing the file, and can be used later on. The &lt;code&gt;image&lt;/code&gt; tag defines the base image to be used for running the pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;lt;base image url&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="nt"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;
 &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;3.2. Defining stages&lt;/h4&gt;
&lt;p&gt;Before defining the jobs, all stages must be explicitly defined. A stage can run commands in sequence or in parallel. In lieu of building RPMs, the stages can be defined as below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;package&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;koji&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deploy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;3.3. Defining jobs&lt;/h4&gt;
&lt;p&gt;A job defines a series of actions that must be performed when it is invoked. It can take numerous tags as options, such as the job stage, which allows sequencing the job order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;rpm_build_binary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Name of the job.&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*rpmbuild_deps&lt;/span&gt; &lt;span class="c1"&gt;# References a different job.&lt;/span&gt;
 &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# The scripts to execute.&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rpmbuild -bb $SPEC_FILE --define &amp;quot;dist $DIST&amp;quot; --define &amp;quot;_topdir $(pwd)/rpmbuild&amp;quot; --define &amp;quot;_sourcedir $(pwd)&amp;quot;&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rpm -qpl rpmbuild/RPMS/noarch/*&lt;/span&gt;
 &lt;span class="nt"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Do not execute the job for the following.&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tags&lt;/span&gt; &lt;span class="c1"&gt;# This job will not be executed when a new tag is created.&lt;/span&gt;
 &lt;span class="nt"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Lists the artifacts available to the job.&lt;/span&gt;
 &lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Paths available to the job.&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rpmbuild/RPMS/noarch/*&lt;/span&gt;
 &lt;span class="nt"&gt;expire_in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# The time period after which the job should expire.&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1 week&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: By default, all jobs run independently of each other, but dependency can be injected by introducing the &lt;code&gt;dependencies&lt;/code&gt; tag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;3.4. Cross-referencing jobs&lt;/h4&gt;
&lt;p&gt;The YAML format allows assigning an anchor to each job which can later be referenced in successive jobs, thus avoiding code duplication.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;.rpmbuild_deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;rpmbuild_deps&lt;/span&gt;
 &lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yum install -y rpm-build rpmdevtools redhat-rpm-config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;rpmbuild_deps&lt;/code&gt; job can now be expanded at a later stage using &lt;code&gt;&amp;lt;&amp;lt;: *rpmbuild_deps&lt;/code&gt; as shown in the previous section.&lt;/p&gt;
&lt;h4&gt;3.5. Hidden jobs&lt;/h4&gt;
&lt;p&gt;To hide a job so that it's not processed by the GitLab-CI runner, the job's name must be preceded with a dot (&lt;code&gt;.&lt;/code&gt;). This tells the runner to skip processing that job.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The &lt;a href="https://docs.gitlab.com/ee/ci/introduction/index.html"&gt;documentation&lt;/a&gt; on GitLab provides a good overview on the benefits and workflow of continuous integration and deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This blog post explained the build process of an RPM package using the &lt;code&gt;rpmbuild&lt;/code&gt; utility and provided a sample spec file which can be used for building the package. Koji was then introduced which serves as the task scheduler for building RPMs and for keeping a track history of all the running and completed jobs. Finally, it was shown how to automate the entire process using GitLab continuous integration.&lt;/p&gt;
&lt;p&gt;The next step, once the GitLab-CI pipeline is finished, can be to deploy the built RPM on a remote machine (or the cloud) using a configuration management tool, like &lt;a href="https://puppet.com"&gt;Puppet&lt;/a&gt;.&lt;/p&gt;</content><category term="Automation"></category></entry></feed>