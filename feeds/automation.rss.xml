<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>/home/adeel - automation</title><link>/</link><description></description><lastBuildDate>Mon, 11 May 2020 11:02:00 +0200</lastBuildDate><item><title>Plotting graphical data using RRDtool and a Python Collectd plugin</title><link>/plotting-graphical-data-using-rrdtool-and-a-python-collectd-plugin.html</link><description>&lt;!-- Date: 2019-05-30 07:57 --&gt;
&lt;!-- Title: Using RRDtool and a Python Collectd plugin to graph weather data --&gt;
&lt;!-- Title: Plotting graphs data from a Python Collectd plugin using RRDtool --&gt;
&lt;p&gt;Collectd is a Unix daemon which periodically collects statistics that can be used for a myriad of purposes, such as identifying &lt;span class="caps"&gt;CPU&lt;/span&gt; or memory bottleneck issues. The collected data can also be transformed to graphs using &lt;a href="https://oss.oetiker.ch/rrdtool"&gt;RRDtool&lt;/a&gt; or a &lt;a href="https://en.wikipedia.org/wiki/Grafana"&gt;Grafana&lt;/a&gt; dashboard (Grafana provides real time graphs and complex search queries).&lt;/p&gt;
&lt;p&gt;The daemon itself is modular and functions through external plugins where each plugin performs a distinct function. This blog post will explore a plugin which periodically &lt;em&gt;collects weather information of a given city&lt;/em&gt;. The first section will explain how the plugin configuration works and how to plot a graph of the output data using RRDtool. Finally, we will delve into the plugin internals and see how it’s written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Mon, 11 May 2020 11:02:00 +0200</pubDate><guid isPermaLink="false">tag:None,2020-05-11:/plotting-graphical-data-using-rrdtool-and-a-python-collectd-plugin.html</guid><category>automation</category></item><item><title>Programmatically organising your backpacking trip using Google My Maps</title><link>/programmatically-organising-your-backpacking-trip-using-google-my-maps.html</link><description>&lt;blockquote&gt;
&lt;p&gt;This blog post has been converted from a recent &lt;a href="https://docs.google.com/presentation/d/10NlBmnUk7qsh0nPso3Lqg8OvoP6CZg8sHJx1gllHem4/edit#slide=id.g577465d654_0_0"&gt;presentation&lt;/a&gt; I gave during the &lt;a href="https://indico.cern.ch/event/771113/overview"&gt;Thematic &lt;span class="caps"&gt;CERN&lt;/span&gt; School of Computing 2019&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When planning a journey to a new country or a city it helps to mark down all the places you would like to visit and eventually create a travel plan for each day. I personally use Google Maps for finding places of interest including historical buildings, museums, and libraries. As an example, if I were to visit Split, Croatia I can format the query on Google Maps as “places to visit split” which will list all the attractions based on features such as reviews and popularity.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Things to do in Split" src="/images/google-my-maps/things-to-do-split.png" style="width:300px;"/&gt;
&lt;/p&gt;
&lt;p&gt;Although it is possible to use the “Save” feature in Google Maps, it does …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Thu, 30 May 2019 09:14:00 +0200</pubDate><guid isPermaLink="false">tag:None,2019-05-30:/programmatically-organising-your-backpacking-trip-using-google-my-maps.html</guid><category>Automation</category></item><item><title>Building RPM packages with rpmbuild, Koji, and GitLab-CI</title><link>/building-rpm-packages-with-rpmbuild-koji-and-gitlab-ci.html</link><description>&lt;p&gt;The &lt;span class="caps"&gt;RPM&lt;/span&gt; system facilitates the user to query and update a software package. It also allows examining package interdependencies, and verifying package file permissions. This blog post will describe the process of building an &lt;span class="caps"&gt;RPM&lt;/span&gt; package using the &lt;code&gt;rpmbuild&lt;/code&gt; utility and will then explain how to schedule build tasks using Koji. Finally, it will describe how to automate the build pipeline using continuous integration in GitLab.&lt;/p&gt;
&lt;h3&gt;1. &lt;span class="caps"&gt;RPM&lt;/span&gt; Package Manager&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;RPM&lt;/span&gt; Package Manager is an open-source package management system which was originally designed for Red Hat Linux, but it is now supported on most Linux distributions. &lt;span class="caps"&gt;RPM&lt;/span&gt; packages can generally be of two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary &lt;span class="caps"&gt;RPM&lt;/span&gt;: A binary &lt;span class="caps"&gt;RPM&lt;/span&gt; contains the compiled binary of a complete application (or a library …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Mon, 06 May 2019 08:24:00 +0200</pubDate><guid isPermaLink="false">tag:None,2019-05-06:/building-rpm-packages-with-rpmbuild-koji-and-gitlab-ci.html</guid><category>Automation</category></item></channel></rss>