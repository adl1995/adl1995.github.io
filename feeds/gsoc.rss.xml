<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>/home/adeel - GSoC</title><link>https://adl1995.github.io/</link><description></description><lastBuildDate>Thu, 09 Aug 2018 09:28:00 +0200</lastBuildDate><item><title>Google Summer of Code 2018 final evaluation report</title><link>https://adl1995.github.io/google-summer-of-code-2018-final-evaluation-report.html</link><description>&lt;h4&gt;Link to GitHub repository: &lt;a href="https://github.com/BoostGSoC18/geometry"&gt;&lt;code&gt;https://github.com/BoostGSoC18/geometry&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The work is present under the following&amp;nbsp;branches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/BoostGSoC18/geometry/tree/feature/geodesic_direct"&gt;feature/geodesic_direct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BoostGSoC18/geometry/tree/feature/karney_inverse"&gt;feature/karney_inverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BoostGSoC18/geometry/tree/example/distance_formula"&gt;example/distance_formula&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;The goal of this project was to implement the direct and inverse geodesic algorithms in the &lt;a href="https://github.com/boostorg/geometry"&gt;Boost Geometry&lt;/a&gt; library. These methods were proposed by Charles Karney in his &lt;a href="https://arxiv.org/abs/1109.4448"&gt;paper&lt;/a&gt; in&amp;nbsp;2011.&lt;/p&gt;
&lt;p&gt;In a previous &lt;a href="https://adl1995.github.io/inaccuracy-in-boost-geometry-geodesic-algorithms-for-nearly-antipodal-points.html"&gt;blog post&lt;/a&gt;, the inaccuracy of the existing methods was discussed, which provided inconsistent results for nearly antipodal points. To monitor the progress, a weekly &lt;a href="https://github.com/BoostGSoC18/geometry/issues/1"&gt;report&lt;/a&gt; was provided through GitHub, which summarized the work done. Finally, &lt;a href="https://github.com/BoostGSoC18/geometry/issues/3"&gt;benchmarks&lt;/a&gt; were performed against existing methods in Boost Geometry. The performance metric used was execution time and&amp;nbsp;accuracy.&lt;/p&gt;
&lt;p&gt;Additional material, such as utility scripts for parsing the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Thu, 09 Aug 2018 09:28:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2018-08-09:/google-summer-of-code-2018-final-evaluation-report.html</guid><category>GSoC</category></item><item><title>Using variadic templates with lambda expressions in C++ for constrained optimization</title><link>https://adl1995.github.io/using-variadic-templates-with-lambda-expressions-in-c-for-constrained-optimization.html</link><description>&lt;p&gt;Constrained optimization problems are encountered in numerous domains, such as &lt;a href="https://www.princeton.edu/~fhs/paper199/paper199.pdf"&gt;protein folding&lt;/a&gt;, &lt;a href="http://cai2r.net/public/documents/FlorianKnoll_thesis.pdf"&gt;Magnetic Resonance Image reconstruction&lt;/a&gt;, and &lt;a href="https://ieeexplore.ieee.org/document/4100822"&gt;radiation therapy&lt;/a&gt;. In this problem, we are given with an objective function which is to be minimized or maximized with respect to constraints on some variables. The constraints can either be soft constraints or hard constraints, which can be specified by boolean operators, such as equality, relational, and conditional&amp;nbsp;operators. &lt;/p&gt;
&lt;p&gt;This post provides insight on how to model constraints using lambda expressions, and how to pass a varying number of constraints to a function using variadic templates. Before moving on with the C++ implementation, it will be helpful to review how variadic functions are used in C and how they differ from the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Fri, 01 Jun 2018 15:44:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2018-06-01:/using-variadic-templates-with-lambda-expressions-in-c-for-constrained-optimization.html</guid><category>GSoC</category><category>C++</category></item><item><title>Inaccuracy in Boost Geometry geodesic algorithms for nearly antipodal points</title><link>https://adl1995.github.io/inaccuracy-in-boost-geometry-geodesic-algorithms-for-nearly-antipodal-points.html</link><description>&lt;p&gt;Nearly antipodal points or antipodes refer to the most geographically distant points on a sphere, that is, the points are diametrically opposite to each other. If a line is drawn between these two points, it passes through the center of the sphere and forms its&amp;nbsp;diameter.&lt;/p&gt;
&lt;p&gt;Computing the great circle distance between these two points is often a corner case for most geodesic computations, and the distance is either overestimated or underestimated. In case of &lt;a href="https://en.wikipedia.org/wiki/Vincenty%27s_formulae"&gt;Vincenty&amp;#8217;s formulae&lt;/a&gt;, the solution fails to converge, or provides inaccurate results. This can have major implications in applications which rely on accurate results, such as flight navigation systems. The software can handle this either by doing an error analysis check and providing specific values …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Thu, 10 May 2018 21:55:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2018-05-10:/inaccuracy-in-boost-geometry-geodesic-algorithms-for-nearly-antipodal-points.html</guid><category>GSoC</category></item><item><title>Parallel tile fetching and CPU-and-memory statistics</title><link>https://adl1995.github.io/parallel-tile-fetching-and-cpu-and-memory-statistics.html</link><description>&lt;p&gt;The &lt;a href="http://hips.readthedocs.io"&gt;hips&lt;/a&gt; package now supports parallel tile fetching. The user can achieve this either using the &lt;a href="https://docs.python.org/3/library/urllib.html"&gt;urllib&lt;/a&gt; or &lt;a href="https://aiohttp.readthedocs.io/en/stable"&gt;aiohttp&lt;/a&gt;&amp;nbsp;package.&lt;/p&gt;
&lt;p&gt;In case of &lt;a href="http://aiohttp.readthedocs.io/en/stable/"&gt;aiohttp&lt;/a&gt;, the fetched tile data is coupled with &lt;a href="http://hips.readthedocs.io/en/latest/api/hips.HipsTileMeta.html"&gt;&lt;code&gt;HipsTileMeta&lt;/code&gt;&lt;/a&gt; to create a &lt;a href="http://hips.readthedocs.io/en/latest/api/hips.HipsTile.html"&gt;&lt;code&gt;HipsTile&lt;/code&gt;&lt;/a&gt; object. This ensures there is no misalignment of tile data, otherwise, tiles could get swapped during the drawing&amp;nbsp;period.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_tile_aiohttp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HipsTileMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HipsTile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Fetch a HiPS tile asynchronously using aiohttp.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;raw_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HipsTile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also limit the amount of simultaneously open connections using &lt;a href="http://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.TCPConnector"&gt;&lt;code&gt;aiohttp.TCPConnector&lt;/code&gt;&lt;/a&gt; class. The returned object is passed to &lt;a href="http://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession"&gt;&lt;code&gt;aiohttp.ClientSession&lt;/code&gt;&lt;/a&gt;&amp;#8216;s &lt;code&gt;__init__&lt;/code&gt; method. This procedure can be understood in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Sat, 09 Sep 2017 10:58:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-09-09:/parallel-tile-fetching-and-cpu-and-memory-statistics.html</guid><category>GSoC</category></item><item><title>Google Summer of Code 2017 final evaluation report</title><link>https://adl1995.github.io/google-summer-of-code-2017-final-evaluation-report.html</link><description>&lt;h4&gt;Link to GitHub repository: &lt;a href="http://github.com/hipspy/hips"&gt;&lt;code&gt;http://github.com/hipspy/hips&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In addition to the main &lt;a href="http://github.com/hipspy/hips"&gt;hips&lt;/a&gt; repository, I also maintained my personal &lt;a href="https://github.com/adl1995/HIPS-to-Py"&gt;&lt;span class="caps"&gt;HIPS&lt;/span&gt;-to-Py  repository on GitHub&lt;/a&gt;. This contains Jupyter notebooks which showcase the functionality in &lt;a href="http://github.com/hipspy/hips"&gt;hips&lt;/a&gt; and numerous related Python scripts. The &lt;a href="https://github.com/adl1995/HIPS-to-Py/wiki/HiPS-to-Py"&gt;Wiki page&lt;/a&gt; contains a short description on hips. It also contains links to resource documents and telcon notes, which are hosted on Google&amp;nbsp;Docs. &lt;/p&gt;
&lt;h4&gt;List of Pull&amp;nbsp;Requests&lt;/h4&gt;
&lt;h6&gt;Work related with HiPS tile&amp;nbsp;drawing&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hipspy/hips/pull/105"&gt;Add progress bar support for fetching and drawing HiPS&amp;nbsp;tiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hipspy/hips/pull/104"&gt;Add reporting functionality for&amp;nbsp;HipsPainter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hipspy/hips/pull/99"&gt;Introduce precise drawing&amp;nbsp;algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hipspy/hips/pull/75"&gt;Add methods for drawing markers over sky&amp;nbsp;image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hipspy/hips/pull/91"&gt;Introduce class HipsDrawResult in&amp;nbsp;simple.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hipspy/hips/pull/89"&gt;Add method to_split in SimpleTilePainter for checking whether to split a …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Mon, 28 Aug 2017 22:35:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-08-28:/google-summer-of-code-2017-final-evaluation-report.html</guid><category>GSoC</category></item><item><title>Fixing tile distortion issue in hips package</title><link>https://adl1995.github.io/fixing-tile-distortion-issue-in-hips-package.html</link><description>&lt;p&gt;As documented in the &lt;a href="http://hips.readthedocs.io/en/latest/drawing_algo.html#tile-distortion-issue"&gt;tile distortion issue&lt;/a&gt; section, the previous technique for drawing HiPS tiles brings some astrometry offsets for distorted&amp;nbsp;tiles.&lt;/p&gt;
&lt;p&gt;An example of such distortions can be viewed at this link (uncheck &amp;#8220;Activate deformations reduction algorithm&amp;#8221; to view the astrometry offsets): &lt;a href="http://cds.unistra.fr/~boch/AL/test-reduce-deformations2.html"&gt;http://cds.unistra.fr/~boch/&lt;span class="caps"&gt;AL&lt;/span&gt;/test-reduce-deformations2.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To overcome this issue, the parent tile is divided into four children tiles if it meets the following two&amp;nbsp;criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One edge is greater than 300 pixels when&amp;nbsp;projected&lt;/li&gt;
&lt;li&gt;Or, the ratio of smaller diagonal on larger diagonal is smaller than 0.7 and one of the diagonal is greater than 150 pixels when&amp;nbsp;projected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For handling these checks, a function &lt;code&gt;is_tile_distorted&lt;/code&gt; is&amp;nbsp;introduced:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_tile_distorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corners&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Thu, 10 Aug 2017 11:28:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-08-10:/fixing-tile-distortion-issue-in-hips-package.html</guid><category>GSoC</category></item><item><title>RGB tile drawing in hips package</title><link>https://adl1995.github.io/rgb-tile-drawing-in-hips-package.html</link><description>&lt;p&gt;The &lt;code&gt;hips&lt;/code&gt; package now supports &lt;span class="caps"&gt;RGB&lt;/span&gt; tile drawing. To make this possible, the output image dimensions had to be altered according to the following&amp;nbsp;configuration:&lt;/p&gt;
&lt;p&gt;The output image shape is two dimensional for grayscale, and three dimensional for color&amp;nbsp;images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shape = (height, width)&lt;/code&gt; for &lt;span class="caps"&gt;FITS&lt;/span&gt; images with one grayscale&amp;nbsp;channel&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shape = (height, width, 3)&lt;/code&gt; for &lt;span class="caps"&gt;JPG&lt;/span&gt; images with three &lt;span class="caps"&gt;RGB&lt;/span&gt;&amp;nbsp;channels&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shape = (height, width, 4)&lt;/code&gt; for &lt;span class="caps"&gt;PNG&lt;/span&gt; images with four &lt;span class="caps"&gt;RGBA&lt;/span&gt;&amp;nbsp;channels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to this, in-case of &lt;span class="caps"&gt;JPG&lt;/span&gt; and &lt;span class="caps"&gt;PNG&lt;/span&gt; format, the tiles are flipped in the vertical direction, which leads to incorrect tile drawing using the previous technique. The figure below is taken from the &lt;a href="http://www.ivoa.net/documents/HiPS/20160623/WD-HiPS-1.0-20160623.pdf"&gt;hips paper&lt;/a&gt;, figure 6, which shows the inverted&amp;nbsp;tiles.&lt;/p&gt;
&lt;p&gt;&lt;img alt="HiPS inverted tiles figure" src="https://adl1995.github.io/images/flipped-hips-tile.png"&gt;&lt;/p&gt;
&lt;p&gt;To overcome this, the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Sun, 23 Jul 2017 12:46:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-07-23:/rgb-tile-drawing-in-hips-package.html</guid><category>GSoC</category></item><item><title>Parameterized testing using Pytest</title><link>https://adl1995.github.io/parameterized-testing-using-pytest.html</link><description>&lt;p&gt;Pytest provides a feature for parameterized testing in Python. The built-in &lt;code&gt;pytest.mark.parametrize&lt;/code&gt; decorator enables parametrization of arguments for a test function. This allows the user to compare the values for input and&amp;nbsp;output.&lt;/p&gt;
&lt;p&gt;Here is a typical example which shows its&amp;nbsp;usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;get_hips_order_for_resolution_pars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01232&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolution_res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.06395791924665553&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0016022&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolution_res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.003997369952915971&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.00009032&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolution_res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.00012491781102862408&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_hips_order_for_resolution_pars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_hips_order_for_resolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pars&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;hips_order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_get_hips_order_for_resolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tile_width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;resolution&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;hips_order&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;order&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;hips_resolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nside2resol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order2nside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hips_order&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;assert_allclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hips_resolution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;resolution_res&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without the support of parameterized testing, the code had to be duplicated three times …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Thu, 13 Jul 2017 09:40:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-07-13:/parameterized-testing-using-pytest.html</guid><category>GSoC</category></item><item><title>Creating custom decorators in Python 3.6</title><link>https://adl1995.github.io/creating-custom-decorators-in-python-36.html</link><description>&lt;p&gt;In the &lt;a href="http://hips.readthedocs.io"&gt;hips&lt;/a&gt; package, often data has to be fetched from remote servers, especially HiPS tiles. One way to cut back on the queries was by introducing the &lt;a href="github.com/hipspy/hips-extra"&gt;hips-extra&lt;/a&gt; repository. This contains HiPS tiles from various HiPS surveys. This allows us to quickly fetch tiles from local storage, which makes the testing process less&amp;nbsp;time-consuming.&lt;/p&gt;
&lt;p&gt;As &lt;a href="github.com/hipspy/hips-extra"&gt;hips-extra&lt;/a&gt; repository does not come with the standard &lt;a href="http://hips.readthedocs.io"&gt;hips&lt;/a&gt; package, user has to manually clone it. The availability of the package is checked using an environment variable. This can be set&amp;nbsp;using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;$export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;HIPS_EXTRA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;ath&lt;span class="se"&gt;\t&lt;/span&gt;o&lt;span class="se"&gt;\h&lt;/span&gt;ips-extra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Python, the path can be retrieved using the &lt;code&gt;os&lt;/code&gt; module: &lt;code&gt;os.environ['HIPS_EXTRA']&lt;/code&gt;. Now, what if the user does not have &lt;a href="github.com/hipspy/hips-extra"&gt;hips-extra&lt;/a&gt; repository …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Sun, 02 Jul 2017 12:41:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-07-02:/creating-custom-decorators-in-python-36.html</guid><category>GSoC</category></item><item><title>HiPS tile drawing</title><link>https://adl1995.github.io/hips-tile-drawing.html</link><description>&lt;p&gt;One of the major part of the &lt;a href="http://hips.readthedocs.io"&gt;hips package&lt;/a&gt; is being able to draw HiPS tiles onto a larger sky image. This involves using projective transformation for computing and drawing a HiPS tile at the correct location. The discussion below is for the tile containing the galactic center pixel values. To achieve this, several steps are&amp;nbsp;involved.&lt;/p&gt;
&lt;h3&gt;Computing boundaries of a HiPS&amp;nbsp;tile&lt;/h3&gt;
&lt;p&gt;A tile is defined by four corners, &lt;a href="http://hips.readthedocs.io"&gt;hips&lt;/a&gt; uses the &lt;a href="https://github.com/astropy/astropy-healpix/blob/3fcb80921f362e3620f9892e934d4f0f69b7bf21/astropy_healpix/high_level.py"&gt;astropy_healpix.HEALPix.boundaries_skycoord&lt;/a&gt; function which returns the angle ($\theta$ and $\phi$) in radians wrapped inside &lt;a href="http://docs.astropy.org/en/stable/api/astropy.coordinates.SkyCoord.html"&gt;astropy.coordinates.SkyCoord&lt;/a&gt; class. This contains the four corners of a HiPS tile in the order (North, West, South, East). A snippet which computes the corners of a HiPS tile is provided …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Sat, 24 Jun 2017 11:50:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-06-24:/hips-tile-drawing.html</guid><category>GSoC</category></item><item><title>Type annotations in Python 3.6 and using Mypy as a static type checker</title><link>https://adl1995.github.io/type-annotations-in-python-36-and-using-mypy-as-a-static-type-checker.html</link><description>&lt;p&gt;The main goal of type annotations is to open up Python code for static analysis. It makes it easier to debug and maintain code because each type is explicitly stated. It also makes the code review process simpler as the parameters and return types can be inferred from the function header. These changes were introduced in &lt;a href="https://www.python.org/dev/peps/pep-0484"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 484&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this regards, static type checking is the most important. It allows support for off-line third-party type checkers, such as Mypy, which will be introduced in a &lt;a href="#static-type-checking-using-mypy"&gt;later section&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Purpose of&amp;nbsp;annotations&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;typing&lt;/code&gt; module in Python 3.6 contains many definitions that are useful in statically typed code. For instance, the &lt;code&gt;Any&lt;/code&gt; type is used by default for every argument and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Sun, 11 Jun 2017 12:58:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-06-11:/type-annotations-in-python-36-and-using-mypy-as-a-static-type-checker.html</guid><category>GSoC</category></item><item><title>An overview of Hierarchical Progressive Surveys (HiPS) and the HEALPix framework</title><link>https://adl1995.github.io/an-overview-of-hierarchical-progressive-surveys-hips-and-the-healpix-framework.html</link><description>&lt;p&gt;The &lt;a href="https://www.aanda.org/articles/aa/pdf/2015/06/aa26075-15.pdf"&gt;Hierarchical Progressive Surveys (HiPS)&lt;/a&gt; is a scheme for describing astronomical images and provides a solution for managing large amounts of data. Underneath, HiPS utilizes the HEALPix framework for mapping a sphere (in this case, part of a sky) and transforms it into &lt;a href="#hips-tiles"&gt;HiPS tiles&lt;/a&gt; and &lt;a href="#hips-pixels"&gt;HiPS pixels&lt;/a&gt; which contain the astronomical data. The HiPS scheme emphasizes on usability, and abstracts the scientific details to reach a wider audience. This can be further built upon for statistical analysis of large datasets. A brief overview of HEALPix is given below before moving onto the working of&amp;nbsp;HiPS.&lt;/p&gt;
&lt;h3&gt;Introduction to&amp;nbsp;HEALPix&lt;/h3&gt;
&lt;p&gt;HEALPix, an acronym of &amp;#8216;Hierarchical Equal Area isoLatitude Pixelization of a sphere&amp;#8217;, is a framework for discretizing high resolution data. It …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Wed, 31 May 2017 19:39:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-05-31:/an-overview-of-hierarchical-progressive-surveys-hips-and-the-healpix-framework.html</guid><category>GSoC</category></item><item><title>A comparison of response times using URLLib, GRequests, and asyncio</title><link>https://adl1995.github.io/a-comparison-of-response-times-using-urllib-grequests-and-asyncio.html</link><description>&lt;p&gt;For the &lt;a href="https://github.com/hipspy/hips"&gt;HiPS client&lt;/a&gt; multiple tiles have to be fetched for time efficiency. To achieve this, we create a separate thread for each outgoing request. Thus, requests are sent concurrently. A comparison is done utilizing Python&amp;#8217;s &lt;code&gt;threading&lt;/code&gt; library. The elapsed time is calculated using the &lt;code&gt;time&lt;/code&gt; module. For fetching the tiles &lt;code&gt;urllib&lt;/code&gt;, &lt;code&gt;grequests&lt;/code&gt;, &lt;code&gt;aiohttp&lt;/code&gt;, and &lt;code&gt;asyncio&lt;/code&gt; packages are used. The HiPS survey chosen for this comparison is &lt;code&gt;alasky.u-strasbg.fr&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;For fetching 10 tiles, it takes the following time (in&amp;nbsp;seconds):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Elapsed Time URLLib (without concurrency): 3.5430831909179688
Elapsed Time URLLib (with concurrency): 0.388397216796875
Elapsed Time URLLib (with aiohttp): 0.3900480270385742
Elapsed Time GRequests: 1.6238431930541992
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, for fetching 100 tiles, it&amp;nbsp;takes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Elapsed Time URLLib (without concurrency …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Tue, 09 May 2017 15:54:00 +0200</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-05-09:/a-comparison-of-response-times-using-urllib-grequests-and-asyncio.html</guid><category>GSoC</category></item><item><title>My First Article</title><link>https://adl1995.github.io/my-first-article.html</link><description>&lt;p&gt;Hello&amp;nbsp;World!&lt;/p&gt;
&lt;p&gt;This blog will be extensively used for posting GSoC updates, apart from other technical&amp;nbsp;ramblings.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Sun, 19 Mar 2017 22:45:00 +0100</pubDate><guid isPermaLink="false">tag:adl1995.github.io,2017-03-19:/my-first-article.html</guid><category>GSoC</category></item></channel></rss>